<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Model;

class ServiceSpecRollbackConfig
{
    /**
     * Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).
     *
     * @var int
     */
    protected $parallelism;
    /**
     * Amount of time between rollback iterations, in nanoseconds.
     *
     * @var int
     */
    protected $delay;
    /**
     * Action to take if an rolled back task fails to run, or stops running during the rollback.
     *
     * @var string
     */
    protected $failureAction;
    /**
     * Amount of time to monitor each rolled back task for failures, in nanoseconds.
     *
     * @var int
     */
    protected $monitor;
    /**
     * The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.
     *
     * @var float
     */
    protected $maxFailureRatio = 0;
    /**
     * The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
     *
     * @var string
     */
    protected $order;

    /**
     * Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).
     *
     * @return int
     */
    public function getParallelism(): ?int
    {
        return $this->parallelism;
    }

    /**
     * Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).
     *
     * @param int $parallelism
     */
    public function setParallelism(?int $parallelism): self
    {
        $this->parallelism = $parallelism;

        return $this;
    }

    /**
     * Amount of time between rollback iterations, in nanoseconds.
     *
     * @return int
     */
    public function getDelay(): ?int
    {
        return $this->delay;
    }

    /**
     * Amount of time between rollback iterations, in nanoseconds.
     *
     * @param int $delay
     */
    public function setDelay(?int $delay): self
    {
        $this->delay = $delay;

        return $this;
    }

    /**
     * Action to take if an rolled back task fails to run, or stops running during the rollback.
     *
     * @return string
     */
    public function getFailureAction(): ?string
    {
        return $this->failureAction;
    }

    /**
     * Action to take if an rolled back task fails to run, or stops running during the rollback.
     *
     * @param string $failureAction
     */
    public function setFailureAction(?string $failureAction): self
    {
        $this->failureAction = $failureAction;

        return $this;
    }

    /**
     * Amount of time to monitor each rolled back task for failures, in nanoseconds.
     *
     * @return int
     */
    public function getMonitor(): ?int
    {
        return $this->monitor;
    }

    /**
     * Amount of time to monitor each rolled back task for failures, in nanoseconds.
     *
     * @param int $monitor
     */
    public function setMonitor(?int $monitor): self
    {
        $this->monitor = $monitor;

        return $this;
    }

    /**
     * The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.
     *
     * @return float
     */
    public function getMaxFailureRatio(): ?float
    {
        return $this->maxFailureRatio;
    }

    /**
     * The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.
     *
     * @param float $maxFailureRatio
     */
    public function setMaxFailureRatio(?float $maxFailureRatio): self
    {
        $this->maxFailureRatio = $maxFailureRatio;

        return $this;
    }

    /**
     * The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
     *
     * @return string
     */
    public function getOrder(): ?string
    {
        return $this->order;
    }

    /**
     * The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
     *
     * @param string $order
     */
    public function setOrder(?string $order): self
    {
        $this->order = $order;

        return $this;
    }
}
