<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class EventsGetResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\EventsGetResponse200';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\EventsGetResponse200;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\EventsGetResponse200();
        if (property_exists($data, 'Type') && $data->{'Type'} !== null) {
            $object->setType($data->{'Type'});
        }
        if (property_exists($data, 'Action') && $data->{'Action'} !== null) {
            $object->setAction($data->{'Action'});
        }
        if (property_exists($data, 'Actor') && $data->{'Actor'} !== null) {
            $object->setActor($this->denormalizer->denormalize($data->{'Actor'}, 'Docker\\API\\Model\\EventsGetResponse200Actor', 'json', $context));
        }
        if (property_exists($data, 'time') && $data->{'time'} !== null) {
            $object->setTime($data->{'time'});
        }
        if (property_exists($data, 'timeNano') && $data->{'timeNano'} !== null) {
            $object->setTimeNano($data->{'timeNano'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getType()) {
            $data->{'Type'} = $object->getType();
        }
        if (null !== $object->getAction()) {
            $data->{'Action'} = $object->getAction();
        }
        if (null !== $object->getActor()) {
            $data->{'Actor'} = $this->normalizer->normalize($object->getActor(), 'json', $context);
        }
        if (null !== $object->getTime()) {
            $data->{'time'} = $object->getTime();
        }
        if (null !== $object->getTimeNano()) {
            $data->{'timeNano'} = $object->getTimeNano();
        }

        return $data;
    }
}
