<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TaskStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\TaskStatus';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\TaskStatus;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\TaskStatus();
        if (property_exists($data, 'Timestamp') && $data->{'Timestamp'} !== null) {
            $object->setTimestamp($data->{'Timestamp'});
        }
        if (property_exists($data, 'State') && $data->{'State'} !== null) {
            $object->setState($data->{'State'});
        }
        if (property_exists($data, 'Message') && $data->{'Message'} !== null) {
            $object->setMessage($data->{'Message'});
        }
        if (property_exists($data, 'Err') && $data->{'Err'} !== null) {
            $object->setErr($data->{'Err'});
        }
        if (property_exists($data, 'ContainerStatus') && $data->{'ContainerStatus'} !== null) {
            $object->setContainerStatus($this->denormalizer->denormalize($data->{'ContainerStatus'}, 'Docker\\API\\Model\\TaskStatusContainerStatus', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getTimestamp()) {
            $data->{'Timestamp'} = $object->getTimestamp();
        }
        if (null !== $object->getState()) {
            $data->{'State'} = $object->getState();
        }
        if (null !== $object->getMessage()) {
            $data->{'Message'} = $object->getMessage();
        }
        if (null !== $object->getErr()) {
            $data->{'Err'} = $object->getErr();
        }
        if (null !== $object->getContainerStatus()) {
            $data->{'ContainerStatus'} = $this->normalizer->normalize($object->getContainerStatus(), 'json', $context);
        }

        return $data;
    }
}
