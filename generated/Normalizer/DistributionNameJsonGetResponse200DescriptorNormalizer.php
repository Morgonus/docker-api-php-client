<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DistributionNameJsonGetResponse200DescriptorNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\DistributionNameJsonGetResponse200Descriptor';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\DistributionNameJsonGetResponse200Descriptor;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\DistributionNameJsonGetResponse200Descriptor();
        if (property_exists($data, 'MediaType') && $data->{'MediaType'} !== null) {
            $object->setMediaType($data->{'MediaType'});
        }
        if (property_exists($data, 'Size') && $data->{'Size'} !== null) {
            $object->setSize($data->{'Size'});
        }
        if (property_exists($data, 'Digest') && $data->{'Digest'} !== null) {
            $object->setDigest($data->{'Digest'});
        }
        if (property_exists($data, 'URLs') && $data->{'URLs'} !== null) {
            $values = [];
            foreach ($data->{'URLs'} as $value) {
                $values[] = $value;
            }
            $object->setURLs($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getMediaType()) {
            $data->{'MediaType'} = $object->getMediaType();
        }
        if (null !== $object->getSize()) {
            $data->{'Size'} = $object->getSize();
        }
        if (null !== $object->getDigest()) {
            $data->{'Digest'} = $object->getDigest();
        }
        if (null !== $object->getURLs()) {
            $values = [];
            foreach ($object->getURLs() as $value) {
                $values[] = $value;
            }
            $data->{'URLs'} = $values;
        }

        return $data;
    }
}
