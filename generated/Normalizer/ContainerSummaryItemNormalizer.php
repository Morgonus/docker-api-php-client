<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ContainerSummaryItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\ContainerSummaryItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\ContainerSummaryItem;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\ContainerSummaryItem();
        if (property_exists($data, 'Id') && $data->{'Id'} !== null) {
            $object->setId($data->{'Id'});
        }
        if (property_exists($data, 'Names') && $data->{'Names'} !== null) {
            $values = [];
            foreach ($data->{'Names'} as $value) {
                $values[] = $value;
            }
            $object->setNames($values);
        }
        if (property_exists($data, 'Image') && $data->{'Image'} !== null) {
            $object->setImage($data->{'Image'});
        }
        if (property_exists($data, 'ImageID') && $data->{'ImageID'} !== null) {
            $object->setImageID($data->{'ImageID'});
        }
        if (property_exists($data, 'Command') && $data->{'Command'} !== null) {
            $object->setCommand($data->{'Command'});
        }
        if (property_exists($data, 'Created') && $data->{'Created'} !== null) {
            $object->setCreated($data->{'Created'});
        }
        if (property_exists($data, 'Ports') && $data->{'Ports'} !== null) {
            $values_1 = [];
            foreach ($data->{'Ports'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Docker\\API\\Model\\Port', 'json', $context);
            }
            $object->setPorts($values_1);
        }
        if (property_exists($data, 'SizeRw') && $data->{'SizeRw'} !== null) {
            $object->setSizeRw($data->{'SizeRw'});
        }
        if (property_exists($data, 'SizeRootFs') && $data->{'SizeRootFs'} !== null) {
            $object->setSizeRootFs($data->{'SizeRootFs'});
        }
        if (property_exists($data, 'Labels') && $data->{'Labels'} !== null) {
            $values_2 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'Labels'} as $key => $value_2) {
                $values_2[$key] = $value_2;
            }
            $object->setLabels($values_2);
        }
        if (property_exists($data, 'State') && $data->{'State'} !== null) {
            $object->setState($data->{'State'});
        }
        if (property_exists($data, 'Status') && $data->{'Status'} !== null) {
            $object->setStatus($data->{'Status'});
        }
        if (property_exists($data, 'HostConfig') && $data->{'HostConfig'} !== null) {
            $object->setHostConfig($this->denormalizer->denormalize($data->{'HostConfig'}, 'Docker\\API\\Model\\ContainerSummaryItemHostConfig', 'json', $context));
        }
        if (property_exists($data, 'NetworkSettings') && $data->{'NetworkSettings'} !== null) {
            $object->setNetworkSettings($this->denormalizer->denormalize($data->{'NetworkSettings'}, 'Docker\\API\\Model\\ContainerSummaryItemNetworkSettings', 'json', $context));
        }
        if (property_exists($data, 'Mounts') && $data->{'Mounts'} !== null) {
            $values_3 = [];
            foreach ($data->{'Mounts'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Docker\\API\\Model\\Mount', 'json', $context);
            }
            $object->setMounts($values_3);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'Id'} = $object->getId();
        }
        if (null !== $object->getNames()) {
            $values = [];
            foreach ($object->getNames() as $value) {
                $values[] = $value;
            }
            $data->{'Names'} = $values;
        }
        if (null !== $object->getImage()) {
            $data->{'Image'} = $object->getImage();
        }
        if (null !== $object->getImageID()) {
            $data->{'ImageID'} = $object->getImageID();
        }
        if (null !== $object->getCommand()) {
            $data->{'Command'} = $object->getCommand();
        }
        if (null !== $object->getCreated()) {
            $data->{'Created'} = $object->getCreated();
        }
        if (null !== $object->getPorts()) {
            $values_1 = [];
            foreach ($object->getPorts() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'Ports'} = $values_1;
        }
        if (null !== $object->getSizeRw()) {
            $data->{'SizeRw'} = $object->getSizeRw();
        }
        if (null !== $object->getSizeRootFs()) {
            $data->{'SizeRootFs'} = $object->getSizeRootFs();
        }
        if (null !== $object->getLabels()) {
            $values_2 = new \stdClass();
            foreach ($object->getLabels() as $key => $value_2) {
                $values_2->{$key} = $value_2;
            }
            $data->{'Labels'} = $values_2;
        }
        if (null !== $object->getState()) {
            $data->{'State'} = $object->getState();
        }
        if (null !== $object->getStatus()) {
            $data->{'Status'} = $object->getStatus();
        }
        if (null !== $object->getHostConfig()) {
            $data->{'HostConfig'} = $this->normalizer->normalize($object->getHostConfig(), 'json', $context);
        }
        if (null !== $object->getNetworkSettings()) {
            $data->{'NetworkSettings'} = $this->normalizer->normalize($object->getNetworkSettings(), 'json', $context);
        }
        if (null !== $object->getMounts()) {
            $values_3 = [];
            foreach ($object->getMounts() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'Mounts'} = $values_3;
        }

        return $data;
    }
}
