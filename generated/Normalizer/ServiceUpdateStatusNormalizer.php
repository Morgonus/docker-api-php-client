<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ServiceUpdateStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\ServiceUpdateStatus';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\ServiceUpdateStatus;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\ServiceUpdateStatus();
        if (property_exists($data, 'State') && $data->{'State'} !== null) {
            $object->setState($data->{'State'});
        }
        if (property_exists($data, 'StartedAt') && $data->{'StartedAt'} !== null) {
            $object->setStartedAt($data->{'StartedAt'});
        }
        if (property_exists($data, 'CompletedAt') && $data->{'CompletedAt'} !== null) {
            $object->setCompletedAt($data->{'CompletedAt'});
        }
        if (property_exists($data, 'Message') && $data->{'Message'} !== null) {
            $object->setMessage($data->{'Message'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getState()) {
            $data->{'State'} = $object->getState();
        }
        if (null !== $object->getStartedAt()) {
            $data->{'StartedAt'} = $object->getStartedAt();
        }
        if (null !== $object->getCompletedAt()) {
            $data->{'CompletedAt'} = $object->getCompletedAt();
        }
        if (null !== $object->getMessage()) {
            $data->{'Message'} = $object->getMessage();
        }

        return $data;
    }
}
