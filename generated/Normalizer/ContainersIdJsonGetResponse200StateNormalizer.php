<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ContainersIdJsonGetResponse200StateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\ContainersIdJsonGetResponse200State';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\ContainersIdJsonGetResponse200State;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\ContainersIdJsonGetResponse200State();
        if (property_exists($data, 'Status') && $data->{'Status'} !== null) {
            $object->setStatus($data->{'Status'});
        }
        if (property_exists($data, 'Running') && $data->{'Running'} !== null) {
            $object->setRunning($data->{'Running'});
        }
        if (property_exists($data, 'Paused') && $data->{'Paused'} !== null) {
            $object->setPaused($data->{'Paused'});
        }
        if (property_exists($data, 'Restarting') && $data->{'Restarting'} !== null) {
            $object->setRestarting($data->{'Restarting'});
        }
        if (property_exists($data, 'OOMKilled') && $data->{'OOMKilled'} !== null) {
            $object->setOOMKilled($data->{'OOMKilled'});
        }
        if (property_exists($data, 'Dead') && $data->{'Dead'} !== null) {
            $object->setDead($data->{'Dead'});
        }
        if (property_exists($data, 'Pid') && $data->{'Pid'} !== null) {
            $object->setPid($data->{'Pid'});
        }
        if (property_exists($data, 'ExitCode') && $data->{'ExitCode'} !== null) {
            $object->setExitCode($data->{'ExitCode'});
        }
        if (property_exists($data, 'Error') && $data->{'Error'} !== null) {
            $object->setError($data->{'Error'});
        }
        if (property_exists($data, 'StartedAt') && $data->{'StartedAt'} !== null) {
            $object->setStartedAt($data->{'StartedAt'});
        }
        if (property_exists($data, 'FinishedAt') && $data->{'FinishedAt'} !== null) {
            $object->setFinishedAt($data->{'FinishedAt'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getStatus()) {
            $data->{'Status'} = $object->getStatus();
        }
        if (null !== $object->getRunning()) {
            $data->{'Running'} = $object->getRunning();
        }
        if (null !== $object->getPaused()) {
            $data->{'Paused'} = $object->getPaused();
        }
        if (null !== $object->getRestarting()) {
            $data->{'Restarting'} = $object->getRestarting();
        }
        if (null !== $object->getOOMKilled()) {
            $data->{'OOMKilled'} = $object->getOOMKilled();
        }
        if (null !== $object->getDead()) {
            $data->{'Dead'} = $object->getDead();
        }
        if (null !== $object->getPid()) {
            $data->{'Pid'} = $object->getPid();
        }
        if (null !== $object->getExitCode()) {
            $data->{'ExitCode'} = $object->getExitCode();
        }
        if (null !== $object->getError()) {
            $data->{'Error'} = $object->getError();
        }
        if (null !== $object->getStartedAt()) {
            $data->{'StartedAt'} = $object->getStartedAt();
        }
        if (null !== $object->getFinishedAt()) {
            $data->{'FinishedAt'} = $object->getFinishedAt();
        }

        return $data;
    }
}
