<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DeviceRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\DeviceRequest';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\DeviceRequest;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\DeviceRequest();
        if (property_exists($data, 'Driver') && $data->{'Driver'} !== null) {
            $object->setDriver($data->{'Driver'});
        }
        if (property_exists($data, 'Count') && $data->{'Count'} !== null) {
            $object->setCount($data->{'Count'});
        }
        if (property_exists($data, 'DeviceIDs') && $data->{'DeviceIDs'} !== null) {
            $values = [];
            foreach ($data->{'DeviceIDs'} as $value) {
                $values[] = $value;
            }
            $object->setDeviceIDs($values);
        }
        if (property_exists($data, 'Capabilities') && $data->{'Capabilities'} !== null) {
            $values_1 = [];
            foreach ($data->{'Capabilities'} as $value_1) {
                $values_2 = [];
                foreach ($value_1 as $value_2) {
                    $values_2[] = $value_2;
                }
                $values_1[] = $values_2;
            }
            $object->setCapabilities($values_1);
        }
        if (property_exists($data, 'Options') && $data->{'Options'} !== null) {
            $values_3 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'Options'} as $key => $value_3) {
                $values_3[$key] = $value_3;
            }
            $object->setOptions($values_3);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDriver()) {
            $data->{'Driver'} = $object->getDriver();
        }
        if (null !== $object->getCount()) {
            $data->{'Count'} = $object->getCount();
        }
        if (null !== $object->getDeviceIDs()) {
            $values = [];
            foreach ($object->getDeviceIDs() as $value) {
                $values[] = $value;
            }
            $data->{'DeviceIDs'} = $values;
        }
        if (null !== $object->getCapabilities()) {
            $values_1 = [];
            foreach ($object->getCapabilities() as $value_1) {
                $values_2 = [];
                foreach ($value_1 as $value_2) {
                    $values_2[] = $value_2;
                }
                $values_1[] = $values_2;
            }
            $data->{'Capabilities'} = $values_1;
        }
        if (null !== $object->getOptions()) {
            $values_3 = new \stdClass();
            foreach ($object->getOptions() as $key => $value_3) {
                $values_3->{$key} = $value_3;
            }
            $data->{'Options'} = $values_3;
        }

        return $data;
    }
}
