openapi: 3.0.1
info:
  title: Docker Engine API
  description: |
    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.

    Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.

    # Errors

    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:

    ```
    {
      "message": "page not found"
    }
    ```

    # Versioning

    The API is usually changed in each release, so API calls are versioned to
    ensure that clients don't break. To lock to a specific version of the API,
    you prefix the URL with its version, for example, call `/v1.30/info` to use
    the v1.30 version of the `/info` endpoint. If the API version specified in
    the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
    is returned.

    If you omit the version-prefix, the current version of the API (v1.40) is used.
    For example, calling `/info` is the same as calling `/v1.40/info`. Using the
    API without a version-prefix is deprecated and will be removed in a future release.

    Engine releases in the near future should support this version of the API,
    so your client will continue to work even if it is talking to a newer Engine.

    The API uses an open schema model, which means server may add extra properties
    to responses. Likewise, the server will ignore any extra query parameters and
    request body properties. When you write clients, you need to ignore additional
    properties in responses to ensure they do not break when talking to newer
    daemons.


    # Authentication

    Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:

    ```
    {
      "username": "string",
      "password": "string",
      "email": "string",
      "serveraddress": "string"
    }
    ```

    The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.

    If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:

    ```
    {
      "identitytoken": "9cbaf023786cd7..."
    }
    ```
  version: "1.40"
  x-logo:
    url: https://docs.docker.com/images/logo-docker-main.png
servers:
  - url: /v1.40
tags:
  - name: Container
    description: |
      Create and manage containers.
    x-displayName: Containers
  - name: Image
    x-displayName: Images
  - name: Network
    description: |
      Networks are user-defined networks that containers can be attached to. See the [networking documentation](https://docs.docker.com/engine/userguide/networking/) for more information.
    x-displayName: Networks
  - name: Volume
    description: |
      Create and manage persistent storage that can be attached to containers.
    x-displayName: Volumes
  - name: Exec
    description: |
      Run new commands inside running containers. See the [command-line reference](https://docs.docker.com/engine/reference/commandline/exec/) for more information.

      To exec a command in a container, you first need to create an exec instance, then start it. These two API endpoints are wrapped up in a single command-line command, `docker exec`.
    x-displayName: Exec
  - name: Swarm
    description: |
      Engines can be clustered together in a swarm. See [the swarm mode documentation](https://docs.docker.com/engine/swarm/) for more information.
    x-displayName: Swarm
  - name: Node
    description: |
      Nodes are instances of the Engine participating in a swarm. Swarm mode must be enabled for these endpoints to work.
    x-displayName: Nodes
  - name: Service
    description: |
      Services are the definitions of tasks to run on a swarm. Swarm mode must be enabled for these endpoints to work.
    x-displayName: Services
  - name: Task
    description: |
      A task is a container running on a swarm. It is the atomic scheduling unit of swarm. Swarm mode must be enabled for these endpoints to work.
    x-displayName: Tasks
  - name: Secret
    description: |
      Secrets are sensitive data that can be used by services. Swarm mode must be enabled for these endpoints to work.
    x-displayName: Secrets
  - name: Config
    description: |
      Configs are application configurations that can be used by services. Swarm mode must be enabled for these endpoints to work.
    x-displayName: Configs
  - name: Plugin
    x-displayName: Plugins
  - name: System
    x-displayName: System
paths:
  /containers/json:
    get:
      tags:
        - Container
      summary: List containers
      description: |
        Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).

        Note that it uses a different, smaller representation of a container than inspecting a single container. For example,
        the list of linked containers is not propagated .
      operationId: ContainerList
      parameters:
        - name: all
          in: query
          description: Return all containers. By default, only running containers are
            shown
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: Return this number of most recently created containers, including
            non-running ones.
          schema:
            type: integer
        - name: size
          in: query
          description: Return the size of container as fields `SizeRw` and `SizeRootFs`.
          schema:
            type: boolean
            default: false
        - name: filters
          in: query
          description: |
            Filters to process on the container list, encoded as JSON (a `map[string][]string`). For example, `{"status": ["paused"]}` will only return paused containers. Available filters:

            - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
            - `before`=(`<container id>` or `<container name>`)
            - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
            - `exited=<int>` containers with exit code of `<int>`
            - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
            - `id=<ID>` a container's ID
            - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
            - `is-task=`(`true`|`false`)
            - `label=key` or `label="key=value"` of a container label
            - `name=<name>` a container's name
            - `network`=(`<network id>` or `<network name>`)
            - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
            - `since`=(`<container id>` or `<container name>`)
            - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
            - `volume`=(`<volume name>` or `<mount point destination>`)
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerSummary'
              example:
                - Id: 8dfafdbc3a40
                  Names:
                    - /boring_feynman
                  Image: ubuntu:latest
                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                  Command: echo 1
                  Created: 1367854155
                  State: Exited
                  Status: Exit 0
                  Ports:
                    - PrivatePort: 2222
                      PublicPort: 3333
                      Type: tcp
                  Labels:
                    com.example.vendor: Acme
                    com.example.license: GPL
                    com.example.version: "1.0"
                  SizeRw: 12288
                  SizeRootFs: 0
                  HostConfig:
                    NetworkMode: default
                  NetworkSettings:
                    Networks:
                      bridge:
                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                        EndpointID: 2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f
                        Gateway: 172.17.0.1
                        IPAddress: 172.17.0.2
                        IPPrefixLen: 16
                        IPv6Gateway: ""
                        GlobalIPv6Address: ""
                        GlobalIPv6PrefixLen: 0
                        MacAddress: 02:42:ac:11:00:02
                  Mounts:
                    - Name: fac362...80535
                      Source: /data
                      Destination: /data
                      Driver: local
                      Mode: ro,Z
                      RW: false
                      Propagation: ""
                - Id: 9cd87474be90
                  Names:
                    - /coolName
                  Image: ubuntu:latest
                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                  Command: echo 222222
                  Created: 1367854155
                  State: Exited
                  Status: Exit 0
                  Ports: []
                  Labels: {}
                  SizeRw: 12288
                  SizeRootFs: 0
                  HostConfig:
                    NetworkMode: default
                  NetworkSettings:
                    Networks:
                      bridge:
                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                        EndpointID: 88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a
                        Gateway: 172.17.0.1
                        IPAddress: 172.17.0.8
                        IPPrefixLen: 16
                        IPv6Gateway: ""
                        GlobalIPv6Address: ""
                        GlobalIPv6PrefixLen: 0
                        MacAddress: 02:42:ac:11:00:08
                  Mounts: []
                - Id: 3176a2479c92
                  Names:
                    - /sleepy_dog
                  Image: ubuntu:latest
                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                  Command: echo 3333333333333333
                  Created: 1367854154
                  State: Exited
                  Status: Exit 0
                  Ports: []
                  Labels: {}
                  SizeRw: 12288
                  SizeRootFs: 0
                  HostConfig:
                    NetworkMode: default
                  NetworkSettings:
                    Networks:
                      bridge:
                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                        EndpointID: 8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d
                        Gateway: 172.17.0.1
                        IPAddress: 172.17.0.6
                        IPPrefixLen: 16
                        IPv6Gateway: ""
                        GlobalIPv6Address: ""
                        GlobalIPv6PrefixLen: 0
                        MacAddress: 02:42:ac:11:00:06
                  Mounts: []
                - Id: 4cb07b47f9fb
                  Names:
                    - /running_cat
                  Image: ubuntu:latest
                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                  Command: echo 444444444444444444444444444444444
                  Created: 1367854152
                  State: Exited
                  Status: Exit 0
                  Ports: []
                  Labels: {}
                  SizeRw: 12288
                  SizeRootFs: 0
                  HostConfig:
                    NetworkMode: default
                  NetworkSettings:
                    Networks:
                      bridge:
                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                        EndpointID: d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9
                        Gateway: 172.17.0.1
                        IPAddress: 172.17.0.5
                        IPPrefixLen: 16
                        IPv6Gateway: ""
                        GlobalIPv6Address: ""
                        GlobalIPv6PrefixLen: 0
                        MacAddress: 02:42:ac:11:00:05
                  Mounts: []
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/create:
    post:
      tags:
        - Container
      summary: Create a container
      operationId: ContainerCreate
      parameters:
        - name: name
          in: query
          description: Assign the specified name to the container. Must match `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.
          schema:
            pattern: ^/?[a-zA-Z0-9][a-zA-Z0-9_.-]+$
            type: string
      requestBody:
        description: Container to create
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ContainerConfig'
                - type: object
                  properties:
                    HostConfig:
                      $ref: '#/components/schemas/HostConfig'
                    NetworkingConfig:
                      type: object
                      properties:
                        EndpointsConfig:
                          type: object
                          additionalProperties:
                            $ref: '#/components/schemas/EndpointSettings'
                          description: A mapping of network name to endpoint configuration
                            for that network.
                      description: This container's networking configuration.
          application/octet-stream:
            schema:
              allOf:
                - $ref: '#/components/schemas/ContainerConfig'
                - type: object
                  properties:
                    HostConfig:
                      $ref: '#/components/schemas/HostConfig'
                    NetworkingConfig:
                      type: object
                      properties:
                        EndpointsConfig:
                          type: object
                          additionalProperties:
                            $ref: '#/components/schemas/EndpointSettings'
                          description: A mapping of network name to endpoint configuration
                            for that network.
                      description: This container's networking configuration.
        required: true
      responses:
        201:
          description: Container created successfully
          content:
            application/json:
              schema:
                title: ContainerCreateResponse
                required:
                  - Id
                  - Warnings
                type: object
                properties:
                  Id:
                    type: string
                    description: The ID of the created container
                    nullable: false
                  Warnings:
                    type: array
                    description: Warnings encountered when creating the container
                    nullable: false
                    items:
                      type: string
                description: OK response to ContainerCreate operation
              example:
                Id: e90e34656806
                Warnings: []
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        409:
          description: conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /containers/{id}/json:
    get:
      tags:
        - Container
      summary: Inspect a container
      description: Return low-level information about a container.
      operationId: ContainerInspect
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: Return the size of container as fields `SizeRw` and `SizeRootFs`
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                title: ContainerInspectResponse
                type: object
                properties:
                  Id:
                    type: string
                    description: The ID of the container
                  Created:
                    type: string
                    description: The time the container was created
                  Path:
                    type: string
                    description: The path to the command being run
                  Args:
                    type: array
                    description: The arguments to the command being run
                    items:
                      type: string
                  State:
                    $ref: '#/components/schemas/ContainerState'
                  Image:
                    type: string
                    description: The container's image
                  ResolvConfPath:
                    type: string
                  HostnamePath:
                    type: string
                  HostsPath:
                    type: string
                  LogPath:
                    type: string
                  Node:
                    type: object
                    properties: {}
                    description: TODO
                  Name:
                    type: string
                  RestartCount:
                    type: integer
                  Driver:
                    type: string
                  Platform:
                    type: string
                  MountLabel:
                    type: string
                  ProcessLabel:
                    type: string
                  AppArmorProfile:
                    type: string
                  ExecIDs:
                    type: array
                    description: IDs of exec instances that are running in the container.
                    nullable: true
                    items:
                      type: string
                  HostConfig:
                    $ref: '#/components/schemas/HostConfig'
                  GraphDriver:
                    $ref: '#/components/schemas/GraphDriverData'
                  SizeRw:
                    type: integer
                    description: The size of files that have been created or changed
                      by this container.
                    format: int64
                  SizeRootFs:
                    type: integer
                    description: The total size of all the files in this container.
                    format: int64
                  Mounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/MountPoint'
                  Config:
                    $ref: '#/components/schemas/ContainerConfig'
                  NetworkSettings:
                    $ref: '#/components/schemas/NetworkSettings'
              example:
                AppArmorProfile: ""
                Args:
                  - -c
                  - exit 9
                Config:
                  AttachStderr: true
                  AttachStdin: false
                  AttachStdout: true
                  Cmd:
                    - /bin/sh
                    - -c
                    - exit 9
                  Domainname: ""
                  Env:
                    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                  Healthcheck:
                    Test:
                      - CMD-SHELL
                      - exit 0
                  Hostname: ba033ac44011
                  Image: ubuntu
                  Labels:
                    com.example.vendor: Acme
                    com.example.license: GPL
                    com.example.version: "1.0"
                  MacAddress: ""
                  NetworkDisabled: false
                  OpenStdin: false
                  StdinOnce: false
                  Tty: false
                  User: ""
                  Volumes:
                    /volumes/data: {}
                  WorkingDir: ""
                  StopSignal: SIGTERM
                  StopTimeout: 10
                Created: 2015-01-06
                Driver: devicemapper
                ExecIDs:
                  - b35395de42bc8abd327f9dd65d913b9ba28c74d2f0734eeeae84fa1c616a0fca
                  - 3fc1232e5cd20c8de182ed81178503dc6437f4e7ef12b52cc5e8de020652f1c4
                HostConfig:
                  MaximumIOps: 0
                  MaximumIOBps: 0
                  BlkioWeight: 0
                  BlkioWeightDevice:
                    - {}
                  BlkioDeviceReadBps:
                    - {}
                  BlkioDeviceWriteBps:
                    - {}
                  BlkioDeviceReadIOps:
                    - {}
                  BlkioDeviceWriteIOps:
                    - {}
                  ContainerIDFile: ""
                  CpusetCpus: ""
                  CpusetMems: ""
                  CpuPercent: 80
                  CpuShares: 0
                  CpuPeriod: 100000
                  CpuRealtimePeriod: 1000000
                  CpuRealtimeRuntime: 10000
                  Devices: []
                  IpcMode: ""
                  LxcConf: []
                  Memory: 0
                  MemorySwap: 0
                  MemoryReservation: 0
                  KernelMemory: 0
                  OomKillDisable: false
                  OomScoreAdj: 500
                  NetworkMode: bridge
                  PidMode: ""
                  PortBindings: {}
                  Privileged: false
                  ReadonlyRootfs: false
                  PublishAllPorts: false
                  RestartPolicy:
                    MaximumRetryCount: 2
                    Name: on-failure
                  LogConfig:
                    Type: json-file
                  Sysctls:
                    net.ipv4.ip_forward: "1"
                  Ulimits:
                    - {}
                  VolumeDriver: ""
                  ShmSize: 67108864
                HostnamePath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname
                HostsPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts
                LogPath: /var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log
                Id: ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39
                Image: 04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2
                MountLabel: ""
                Name: /boring_euclid
                NetworkSettings:
                  Bridge: ""
                  SandboxID: ""
                  HairpinMode: false
                  LinkLocalIPv6Address: ""
                  LinkLocalIPv6PrefixLen: 0
                  SandboxKey: ""
                  EndpointID: ""
                  Gateway: ""
                  GlobalIPv6Address: ""
                  GlobalIPv6PrefixLen: 0
                  IPAddress: ""
                  IPPrefixLen: 0
                  IPv6Gateway: ""
                  MacAddress: ""
                  Networks:
                    bridge:
                      NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      EndpointID: 7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d
                      Gateway: 172.17.0.1
                      IPAddress: 172.17.0.2
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: 02:42:ac:12:00:02
                Path: /bin/sh
                ProcessLabel: ""
                ResolvConfPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf
                RestartCount: 1
                State:
                  Error: ""
                  ExitCode: 9
                  FinishedAt: 2015-01-06
                  Health:
                    Status: healthy
                    FailingStreak: 0
                    Log:
                      - Start: 2019-12-22T10:59:05.6385933Z
                        End: 2019-12-22T10:59:05.8078452Z
                        ExitCode: 0
                        Output: ""
                  OOMKilled: false
                  Dead: false
                  Paused: false
                  Pid: 0
                  Restarting: false
                  Running: true
                  StartedAt: 2015-01-06
                  Status: running
                Mounts:
                  - Name: fac362...80535
                    Source: /data
                    Destination: /data
                    Driver: local
                    Mode: ro,Z
                    RW: false
                    Propagation: ""
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/top:
    get:
      tags:
        - Container
      summary: List processes running inside a container
      description: On Unix systems, this is done by running the `ps` command. This
        endpoint is not supported on Windows.
      operationId: ContainerTop
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: ps_args
          in: query
          description: The arguments to pass to `ps`. For example, `aux`
          schema:
            type: string
            default: -ef
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                title: ContainerTopResponse
                type: object
                properties:
                  Titles:
                    type: array
                    description: The ps column titles
                    items:
                      type: string
                  Processes:
                    type: array
                    description: Each process running in the container, where each
                      is process is an array of values corresponding to the titles
                    items:
                      type: array
                      items:
                        type: string
                description: OK response to ContainerTop operation
              example:
                Titles:
                  - UID
                  - PID
                  - PPID
                  - C
                  - STIME
                  - TTY
                  - TIME
                  - CMD
                Processes:
                  - - root
                    - "13642"
                    - "882"
                    - "0"
                    - 17:03
                    - pts/0
                    - 00:00:00
                    - /bin/bash
                  - - root
                    - "13735"
                    - "13642"
                    - "0"
                    - 17:06
                    - pts/0
                    - 00:00:00
                    - sleep 10
            text/plain:
              schema:
                title: ContainerTopResponse
                type: object
                properties:
                  Titles:
                    type: array
                    description: The ps column titles
                    items:
                      type: string
                  Processes:
                    type: array
                    description: Each process running in the container, where each
                      is process is an array of values corresponding to the titles
                    items:
                      type: array
                      items:
                        type: string
                description: OK response to ContainerTop operation
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/logs:
    get:
      tags:
        - Container
      summary: Get container logs
      description: |
        Get `stdout` and `stderr` logs from a container.

        Note: This endpoint works only for containers with the `json-file` or `journald` logging driver.
      operationId: ContainerLogs
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: follow
          in: query
          description: Keep connection after returning logs.
          schema:
            type: boolean
            default: false
        - name: stdout
          in: query
          description: Return logs from `stdout`
          schema:
            type: boolean
            default: false
        - name: stderr
          in: query
          description: Return logs from `stderr`
          schema:
            type: boolean
            default: false
        - name: since
          in: query
          description: Only return logs since this time, as a UNIX timestamp
          schema:
            type: integer
            default: 0
        - name: until
          in: query
          description: Only return logs before this time, as a UNIX timestamp
          schema:
            type: integer
            default: 0
        - name: timestamps
          in: query
          description: Add timestamps to every log line
          schema:
            type: boolean
            default: false
        - name: tail
          in: query
          description: Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          schema:
            type: string
            default: all
      responses:
        200:
          description: |
            logs returned as a stream in response body.
            For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
            Note that unlike the attach endpoint, the logs endpoint does not upgrade the connection and does not
            set Content-Type.
          content:
            application/json:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: binary
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/changes:
    get:
      tags:
        - Container
      summary: Get changes on a container’s filesystem
      description: |
        Returns which files in a container's filesystem have been added, deleted,
        or modified. The `Kind` of modification can be one of:

        - `0`: Modified
        - `1`: Added
        - `2`: Deleted
      operationId: ContainerChanges
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
      responses:
        200:
          description: The list of changes
          content:
            application/json:
              schema:
                type: array
                items:
                  title: ContainerChangeResponseItem
                  required:
                    - Kind
                    - Path
                  type: object
                  properties:
                    Path:
                      type: string
                      description: Path to file that has changed
                      nullable: false
                    Kind:
                      type: integer
                      description: Kind of change
                      format: uint8
                      nullable: false
                  description: change item in response to ContainerChanges operation
                  x-go-name: ContainerChangeResponseItem
              example:
                - Path: /dev
                  Kind: 0
                - Path: /dev/kmsg
                  Kind: 1
                - Path: /test
                  Kind: 1
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/export:
    get:
      tags:
        - Container
      summary: Export a container
      description: Export the contents of a container as a tarball.
      operationId: ContainerExport
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content: {}
        404:
          description: no such container
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/stats:
    get:
      tags:
        - Container
      summary: Get container stats based on resource usage
      description: |
        This endpoint returns a live stream of a container’s resource usage
        statistics.

        The `precpu_stats` is the CPU statistic of the *previous* read, and is
        used to calculate the CPU usage percentage. It is not an exact copy
        of the `cpu_stats` field.

        If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
        nil then for compatibility with older daemons the length of the
        corresponding `cpu_usage.percpu_usage` array should be used.
      operationId: ContainerStats
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: stream
          in: query
          description: Stream the output. If false, the stats will be output once and
            then it will disconnect.
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: object
              example:
                read: 2015-01-08
                pids_stats:
                  current: 3
                networks:
                  eth0:
                    rx_bytes: 5338
                    rx_dropped: 0
                    rx_errors: 0
                    rx_packets: 36
                    tx_bytes: 648
                    tx_dropped: 0
                    tx_errors: 0
                    tx_packets: 8
                  eth5:
                    rx_bytes: 4641
                    rx_dropped: 0
                    rx_errors: 0
                    rx_packets: 26
                    tx_bytes: 690
                    tx_dropped: 0
                    tx_errors: 0
                    tx_packets: 9
                memory_stats:
                  stats:
                    total_pgmajfault: 0
                    cache: 0
                    mapped_file: 0
                    total_inactive_file: 0
                    pgpgout: 414
                    rss: 6537216
                    total_mapped_file: 0
                    writeback: 0
                    unevictable: 0
                    pgpgin: 477
                    total_unevictable: 0
                    pgmajfault: 0
                    total_rss: 6537216
                    total_rss_huge: 6291456
                    total_writeback: 0
                    total_inactive_anon: 0
                    rss_huge: 6291456
                    hierarchical_memory_limit: 67108864
                    total_pgfault: 964
                    total_active_file: 0
                    active_anon: 6537216
                    total_active_anon: 6537216
                    total_pgpgout: 414
                    total_cache: 0
                    inactive_anon: 0
                    active_file: 0
                    pgfault: 964
                    inactive_file: 0
                    total_pgpgin: 477
                  max_usage: 6651904
                  usage: 6537216
                  failcnt: 0
                  limit: 67108864
                blkio_stats: {}
                cpu_stats:
                  cpu_usage:
                    percpu_usage:
                      - 8646879
                      - 24472255
                      - 36438778
                      - 30657443
                    usage_in_usermode: 50000000
                    total_usage: 100215355
                    usage_in_kernelmode: 30000000
                  system_cpu_usage: 739306590000000
                  online_cpus: 4
                  throttling_data:
                    periods: 0
                    throttled_periods: 0
                    throttled_time: 0
                precpu_stats:
                  cpu_usage:
                    percpu_usage:
                      - 8646879
                      - 24350896
                      - 36438778
                      - 30657443
                    usage_in_usermode: 50000000
                    total_usage: 100093996
                    usage_in_kernelmode: 30000000
                  system_cpu_usage: 9492140000000
                  online_cpus: 4
                  throttling_data:
                    periods: 0
                    throttled_periods: 0
                    throttled_time: 0
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/resize:
    post:
      tags:
        - Container
      summary: Resize a container TTY
      description: Resize the TTY for a container.
      operationId: ContainerResize
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: h
          in: query
          description: Height of the tty session in characters
          schema:
            type: integer
        - name: w
          in: query
          description: Width of the tty session in characters
          schema:
            type: integer
      responses:
        200:
          description: no error
          content: {}
        404:
          description: no such container
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: cannot resize container
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/start:
    post:
      tags:
        - Container
      summary: Start a container
      operationId: ContainerStart
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: detachKeys
          in: query
          description: 'Override the key sequence for detaching a container. Format
          is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of:
          `a-z`, `@`, `^`, `[`, `,` or `_`.'
          schema:
            type: string
      responses:
        204:
          description: no error
          content: {}
        304:
          description: container already started
          content: {}
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/stop:
    post:
      tags:
        - Container
      summary: Stop a container
      operationId: ContainerStop
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: t
          in: query
          description: Number of seconds to wait before killing the container
          schema:
            type: integer
      responses:
        204:
          description: no error
          content: {}
        304:
          description: container already stopped
          content: {}
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/restart:
    post:
      tags:
        - Container
      summary: Restart a container
      operationId: ContainerRestart
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: t
          in: query
          description: Number of seconds to wait before killing the container
          schema:
            type: integer
      responses:
        204:
          description: no error
          content: {}
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/kill:
    post:
      tags:
        - Container
      summary: Kill a container
      description: Send a POSIX signal to a container, defaulting to killing to the
        container.
      operationId: ContainerKill
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: signal
          in: query
          description: Signal to send to the container as an integer or string (e.g.
            `SIGINT`)
          schema:
            type: string
            default: SIGKILL
      responses:
        204:
          description: no error
          content: {}
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: container is not running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28
                  is not running
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/update:
    post:
      tags:
        - Container
      summary: Update a container
      description: Change various configuration options of a container without having
        to recreate it.
      operationId: ContainerUpdate
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Resources'
                - type: object
                  properties:
                    RestartPolicy:
                      $ref: '#/components/schemas/RestartPolicy'
        required: true
      responses:
        200:
          description: The container has been updated.
          content:
            application/json:
              schema:
                title: ContainerUpdateResponse
                type: object
                properties:
                  Warnings:
                    type: array
                    items:
                      type: string
                description: OK response to ContainerUpdate operation
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: update
  /containers/{id}/rename:
    post:
      tags:
        - Container
      summary: Rename a container
      operationId: ContainerRename
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: New name for the container
          required: true
          schema:
            type: string
      responses:
        204:
          description: no error
          content: {}
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: name already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/pause:
    post:
      tags:
        - Container
      summary: Pause a container
      description: |
        Use the freezer cgroup to suspend all processes in a container.

        Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed.
      operationId: ContainerPause
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
      responses:
        204:
          description: no error
          content: {}
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/unpause:
    post:
      tags:
        - Container
      summary: Unpause a container
      description: Resume a container which has been paused.
      operationId: ContainerUnpause
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
      responses:
        204:
          description: no error
          content: {}
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/attach:
    post:
      tags:
        - Container
      summary: Attach to a container
      description: |
        Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.

        Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.

        See [the documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.

        ### Hijacking

        This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.

        This is the response from the daemon for an attach request:

        ```
        HTTP/1.1 200 OK
        Content-Type: application/vnd.docker.raw-stream

        [STREAM]
        ```

        After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.

        To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.

        For example, the client sends this request to upgrade the connection:

        ```
        POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
        Upgrade: tcp
        Connection: Upgrade
        ```

        The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:

        ```
        HTTP/1.1 101 UPGRADED
        Content-Type: application/vnd.docker.raw-stream
        Connection: Upgrade
        Upgrade: tcp

        [STREAM]
        ```

        ### Stream format

        When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.

        The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).

        It is encoded on the first eight bytes like this:

        ```go
        header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
        ```

        `STREAM_TYPE` can be:

        - 0: `stdin` (is written on `stdout`)
        - 1: `stdout`
        - 2: `stderr`

        `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.

        Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.

        The simplest way to implement this protocol is the following:

        1. Read 8 bytes.
        2. Choose `stdout` or `stderr` depending on the first byte.
        3. Extract the frame size from the last four bytes.
        4. Read the extracted size and output it on the correct output.
        5. Goto 1.

        ### Stream format when using a TTY

        When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`.
      operationId: ContainerAttach
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: detachKeys
          in: query
          description: 'Override the key sequence for detaching a container.Format is
          a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of:
          `a-z`, `@`, `^`, `[`, `,` or `_`.'
          schema:
            type: string
        - name: logs
          in: query
          description: |
            Replay previous logs from the container.

            This is useful for attaching to a container that has started and you want to output everything since the container started.

            If `stream` is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.
          schema:
            type: boolean
            default: false
        - name: stream
          in: query
          description: Stream attached streams from the time the request was made onwards
          schema:
            type: boolean
            default: false
        - name: stdin
          in: query
          description: Attach to `stdin`
          schema:
            type: boolean
            default: false
        - name: stdout
          in: query
          description: Attach to `stdout`
          schema:
            type: boolean
            default: false
        - name: stderr
          in: query
          description: Attach to `stderr`
          schema:
            type: boolean
            default: false
      responses:
        101:
          description: no error, hints proxy about hijacking
          content: {}
        200:
          description: no error, no upgrade header found
          content: {}
        400:
          description: bad parameter
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such container
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/attach/ws:
    get:
      tags:
        - Container
      summary: Attach to a container via a websocket
      operationId: ContainerAttachWebsocket
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: detachKeys
          in: query
          description: 'Override the key sequence for detaching a container.Format is
          a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of:
          `a-z`, `@`, `^`, `[`, `,`, or `_`.'
          schema:
            type: string
        - name: logs
          in: query
          description: Return logs
          schema:
            type: boolean
            default: false
        - name: stream
          in: query
          description: Return stream
          schema:
            type: boolean
            default: false
        - name: stdin
          in: query
          description: Attach to `stdin`
          schema:
            type: boolean
            default: false
        - name: stdout
          in: query
          description: Attach to `stdout`
          schema:
            type: boolean
            default: false
        - name: stderr
          in: query
          description: Attach to `stderr`
          schema:
            type: boolean
            default: false
      responses:
        101:
          description: no error, hints proxy about hijacking
          content: {}
        200:
          description: no error, no upgrade header found
          content: {}
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/wait:
    post:
      tags:
        - Container
      summary: Wait for a container
      description: Block until a container stops, then returns the exit code.
      operationId: ContainerWait
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: condition
          in: query
          description: Wait until a container state reaches the given condition, either
            'not-running' (default), 'next-exit', or 'removed'.
          schema:
            type: string
            default: not-running
      responses:
        200:
          description: The container has exit.
          content:
            application/json:
              schema:
                title: ContainerWaitResponse
                required:
                  - StatusCode
                type: object
                properties:
                  StatusCode:
                    type: integer
                    description: Exit code of the container
                    nullable: false
                  Error:
                    type: object
                    properties:
                      Message:
                        type: string
                        description: Details of an error
                    description: container waiting error, if any
                description: OK response to ContainerWait operation
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}:
    delete:
      tags:
        - Container
      summary: Remove a container
      operationId: ContainerDelete
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: v
          in: query
          description: Remove the volumes associated with the container.
          schema:
            type: boolean
            default: false
        - name: force
          in: query
          description: If the container is running, kill it before removing it.
          schema:
            type: boolean
            default: false
        - name: link
          in: query
          description: Remove the specified link associated with the container.
          schema:
            type: boolean
            default: false
      responses:
        204:
          description: no error
          content: {}
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'You cannot remove a running container: c2ada9df5af8. Stop
                  the container before attempting removal or force remove'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/{id}/archive:
    get:
      tags:
        - Container
      summary: Get an archive of a filesystem resource in a container
      description: Get a tar archive of a resource in the filesystem of container
        id.
      operationId: ContainerArchive
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Resource in the container’s filesystem to archive.
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content: {}
        400:
          description: Bad parameter
          content:
            application/x-tar:
              schema:
                type: object
                properties:
                  ErrorResponse:
                    $ref: '#/components/schemas/ErrorResponse'
                  message:
                    type: string
                    description: The error message. Either "must specify path parameter"
                      (path cannot be empty) or "not a directory" (path was asserted
                      to be a directory but exists as a file).
                    nullable: false
        404:
          description: Container or path does not exist
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Container
      summary: Extract an archive of files or folders to a directory in a container
      description: Upload a tar archive to be extracted to a path in the filesystem
        of container id.
      operationId: PutContainerArchive
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: 'Path to a directory in the container to extract the archive’s
          contents into. '
          required: true
          schema:
            type: string
        - name: noOverwriteDirNonDir
          in: query
          description: If “1”, “true”, or “True” then it will be an error if unpacking
            the given content would cause an existing directory to be replaced with
            a non-directory and vice versa.
          schema:
            type: string
        - name: copyUIDGID
          in: query
          description: If “1”, “true”, then it will copy UID/GID maps to the dest file
            or dir
          schema:
            type: string
      requestBody:
        description: 'The input stream must be a tar archive compressed with one of
          the following algorithms: identity (no compression), gzip, bzip2, xz.'
        content:
          application/x-tar:
            schema:
              type: string
              format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          description: The content was extracted successfully
          content: {}
        400:
          description: Bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Permission denied, the volume or container rootfs is marked
            as read-only.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: No such container or path does not exist inside the container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: inputStream
    head:
      tags:
        - Container
      summary: Get information about files in a container
      description: A response header `X-Docker-Container-Path-Stat` is return containing
        a base64 - encoded JSON object with some filesystem header information about
        the path.
      operationId: ContainerArchiveInfo
      parameters:
        - name: id
          in: path
          description: ID or name of the container
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Resource in the container’s filesystem to archive.
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          headers:
            X-Docker-Container-Path-Stat:
              description: A base64 - encoded JSON object with some filesystem header
                information about the path
              schema:
                type: string
          content: {}
        400:
          description: Bad parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorResponse:
                    $ref: '#/components/schemas/ErrorResponse'
                  message:
                    type: string
                    description: The error message. Either "must specify path parameter"
                      (path cannot be empty) or "not a directory" (path was asserted
                      to be a directory but exists as a file).
                    nullable: false
            text/plain:
              schema:
                type: object
                properties:
                  ErrorResponse:
                    $ref: '#/components/schemas/ErrorResponse'
                  message:
                    type: string
                    description: The error message. Either "must specify path parameter"
                      (path cannot be empty) or "not a directory" (path was asserted
                      to be a directory but exists as a file).
                    nullable: false
        404:
          description: Container or path does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /containers/prune:
    post:
      tags:
        - Container
      summary: Delete stopped containers
      operationId: ContainerPrune
      parameters:
        - name: filters
          in: query
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                title: ContainerPruneResponse
                type: object
                properties:
                  ContainersDeleted:
                    type: array
                    description: Container IDs that were deleted
                    items:
                      type: string
                  SpaceReclaimed:
                    type: integer
                    description: Disk space reclaimed in bytes
                    format: int64
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/json:
    get:
      tags:
        - Image
      summary: List Images
      description: Returns a list of images on the server. Note that it uses a different,
        smaller representation of an image than inspecting a single image.
      operationId: ImageList
      parameters:
        - name: all
          in: query
          description: Show all images. Only images from a final layer (no children)
            are shown by default.
          schema:
            type: boolean
            default: false
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

            - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
            - `dangling=true`
            - `label=key` or `label="key=value"` of an image label
            - `reference`=(`<image-name>[:<tag>]`)
            - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
          schema:
            type: string
        - name: digests
          in: query
          description: Show digest information as a `RepoDigests` field on each image.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Summary image data for the images matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageSummary'
              example:
                - Id: sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
                  ParentId: ""
                  RepoTags:
                    - ubuntu:12.04
                    - ubuntu:precise
                  RepoDigests:
                    - ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787
                  Created: 1474925151
                  Size: 103579269
                  VirtualSize: 103579269
                  SharedSize: 0
                  Labels: {}
                  Containers: 2
                - Id: sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175
                  ParentId: ""
                  RepoTags:
                    - ubuntu:12.10
                    - ubuntu:quantal
                  RepoDigests:
                    - ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7
                    - ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3
                  Created: 1403128455
                  Size: 172064416
                  VirtualSize: 172064416
                  SharedSize: 0
                  Labels: {}
                  Containers: 5
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /build:
    post:
      tags:
        - Image
      summary: Build an image
      description: |
        Build an image from a tar archive with a `Dockerfile` in it.

        The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).

        The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.

        The build is canceled if the client drops the connection by quitting or being killed.
      operationId: ImageBuild
      parameters:
        - name: dockerfile
          in: query
          description: Path within the build context to the `Dockerfile`. This is ignored
            if `remote` is specified and points to an external `Dockerfile`.
          schema:
            type: string
            default: Dockerfile
        - name: t
          in: query
          description: A name and optional tag to apply to the image in the `name:tag`
            format. If you omit the tag the default `latest` value is assumed. You can
            provide several `t` parameters.
          schema:
            type: string
        - name: extrahosts
          in: query
          description: Extra hosts to add to /etc/hosts
          schema:
            type: string
        - name: remote
          in: query
          description: A Git repository URI or HTTP/HTTPS context URI. If the URI points
            to a single text file, the file’s contents are placed into a file called
            `Dockerfile` and the image is built from that file. If the URI points to
            a tarball, the file is downloaded by the daemon and the contents therein
            used as the context for the build. If the URI points to a tarball and the
            `dockerfile` parameter is also specified, there must be a file with the
            corresponding path inside the tarball.
          schema:
            type: string
        - name: q
          in: query
          description: Suppress verbose build output.
          schema:
            type: boolean
            default: false
        - name: nocache
          in: query
          description: Do not use the cache when building the image.
          schema:
            type: boolean
            default: false
        - name: cachefrom
          in: query
          description: JSON array of images used for build cache resolution.
          schema:
            type: string
        - name: pull
          in: query
          description: Attempt to pull the image even if an older image exists locally.
          schema:
            type: string
        - name: rm
          in: query
          description: Remove intermediate containers after a successful build.
          schema:
            type: boolean
            default: true
        - name: forcerm
          in: query
          description: Always remove intermediate containers, even upon failure.
          schema:
            type: boolean
            default: false
        - name: memory
          in: query
          description: Set memory limit for build.
          schema:
            type: integer
        - name: memswap
          in: query
          description: Total memory (memory + swap). Set as `-1` to disable swap.
          schema:
            type: integer
        - name: cpushares
          in: query
          description: CPU shares (relative weight).
          schema:
            type: integer
        - name: cpusetcpus
          in: query
          description: CPUs in which to allow execution (e.g., `0-3`, `0,1`).
          schema:
            type: string
        - name: cpuperiod
          in: query
          description: The length of a CPU period in microseconds.
          schema:
            type: integer
        - name: cpuquota
          in: query
          description: Microseconds of CPU time that the container can get in a CPU
            period.
          schema:
            type: integer
        - name: buildargs
          in: query
          description: |
            JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.

            For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the the query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.

            [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg)
          schema:
            type: string
        - name: shmsize
          in: query
          description: Size of `/dev/shm` in bytes. The size must be greater than 0.
            If omitted the system uses 64MB.
          schema:
            type: integer
        - name: squash
          in: query
          description: Squash the resulting images layers into a single layer. *(Experimental
            release only.)*
          schema:
            type: boolean
        - name: labels
          in: query
          description: Arbitrary key/value labels to set on the image, as a JSON map
            of string pairs.
          schema:
            type: string
        - name: networkmode
          in: query
          description: |
            Sets the networking mode for the run commands during build. Supported
            standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.
            Any other value is taken as a custom network's name or ID to which this
            container should connect to.
          schema:
            type: string
        - name: Content-type
          in: header
          schema:
            type: string
            default: application/x-tar
            enum:
              - application/x-tar
        - name: X-Registry-Config
          in: header
          description: |
            This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.

            The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:

            ```
            {
              "docker.example.com": {
                "username": "janedoe",
                "password": "hunter2"
              },
              "https://index.docker.io/v1/": {
                "username": "mobydock",
                "password": "conta1n3rize14"
              }
            }
            ```

            Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
          schema:
            type: string
        - name: platform
          in: query
          description: Platform in the format os[/arch[/variant]]
          schema:
            type: string
        - name: target
          in: query
          description: Target build stage
          schema:
            type: string
        - name: outputs
          in: query
          description: BuildKit output configuration
          schema:
            type: string
      requestBody:
        description: 'A tar archive compressed with one of the following algorithms:
          identity (no compression), gzip, bzip2, xz.'
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: false
      responses:
        200:
          description: no error
          content: {}
        400:
          description: Bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: inputStream
  /build/prune:
    post:
      tags:
        - Image
      summary: Delete builder cache
      operationId: BuildPrune
      parameters:
        - name: keep-storage
          in: query
          description: Amount of disk space in bytes to keep for cache
          schema:
            type: integer
            format: int64
        - name: all
          in: query
          description: Remove all types of build cache
          schema:
            type: boolean
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the list of build cache objects. Available filters:
            - `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')
            - `id=<id>`
            - `parent=<id>`
            - `type=<string>`
            - `description=<string>`
            - `inuse`
            - `shared`
            - `private`
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                title: BuildPruneResponse
                type: object
                properties:
                  CachesDeleted:
                    type: array
                    items:
                      type: string
                      description: ID of build cache object
                  SpaceReclaimed:
                    type: integer
                    description: Disk space reclaimed in bytes
                    format: int64
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/create:
    post:
      tags:
        - Image
      summary: Create an image
      description: Create an image by either pulling it from a registry or importing
        it.
      operationId: ImageCreate
      parameters:
        - name: fromImage
          in: query
          description: Name of the image to pull. The name may include a tag or digest.
            This parameter may only be used when pulling an image. The pull is cancelled
            if the HTTP connection is closed.
          schema:
            type: string
        - name: fromSrc
          in: query
          description: Source to import. The value may be a URL from which the image
            can be retrieved or `-` to read the image from the request body. This parameter
            may only be used when importing an image.
          schema:
            type: string
        - name: repo
          in: query
          description: Repository name given to an image when it is imported. The repo
            may include a tag. This parameter may only be used when importing an image.
          schema:
            type: string
        - name: tag
          in: query
          description: Tag or digest. If empty when pulling an image, this causes all
            tags for the given image to be pulled.
          schema:
            type: string
        - name: message
          in: query
          description: Set commit message for imported image.
          schema:
            type: string
        - name: X-Registry-Auth
          in: header
          description: A base64-encoded auth configuration. [See the authentication
            section for details.](#section/Authentication)
          schema:
            type: string
        - name: platform
          in: query
          description: Platform in the format os[/arch[/variant]]
          schema:
            type: string
      requestBody:
        description: Image content if the value `-` has been specified in fromSrc
          query parameter
        content:
          text/plain:
            schema:
              type: string
          application/octet-stream:
            schema:
              type: string
        required: false
      responses:
        200:
          description: no error
          content: {}
        404:
          description: repository does not exist or no read access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: inputImage
  /images/{name}/json:
    get:
      tags:
        - Image
      summary: Inspect an image
      description: Return low-level information about an image.
      operationId: ImageInspect
      parameters:
        - name: name
          in: path
          description: Image name or id
          required: true
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
              example:
                Id: sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c
                Container: cb91e48a60d01f1e27028b4fc6819f4f290b3cf12496c8176ec714d0d390984a
                Comment: ""
                Os: linux
                Architecture: amd64
                Parent: sha256:91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c
                ContainerConfig:
                  Tty: false
                  Hostname: e611e15f9c9d
                  Domainname: ""
                  AttachStdout: false
                  PublishService: ""
                  AttachStdin: false
                  OpenStdin: false
                  StdinOnce: false
                  NetworkDisabled: false
                  OnBuild: []
                  Image: 91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c
                  User: ""
                  WorkingDir: ""
                  MacAddress: ""
                  AttachStderr: false
                  Labels:
                    com.example.license: GPL
                    com.example.version: "1.0"
                    com.example.vendor: Acme
                  Env:
                    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                  Cmd:
                    - /bin/sh
                    - -c
                    - '#(nop) LABEL com.example.vendor=Acme com.example.license=GPL
                    com.example.version=1.0'
                DockerVersion: 1.9.0-dev
                VirtualSize: 188359297
                Size: 0
                Author: ""
                Created: 2015-09-10T08:30:53.26995814Z
                GraphDriver:
                  Name: aufs
                  Data: {}
                RepoDigests:
                  - localhost:5000/test/busybox/example@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf
                RepoTags:
                  - example:1.0
                  - example:latest
                  - example:stable
                Config:
                  Image: 91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c
                  NetworkDisabled: false
                  OnBuild: []
                  StdinOnce: false
                  PublishService: ""
                  AttachStdin: false
                  OpenStdin: false
                  Domainname: ""
                  AttachStdout: false
                  Tty: false
                  Hostname: e611e15f9c9d
                  Cmd:
                    - /bin/bash
                  Env:
                    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                  Labels:
                    com.example.vendor: Acme
                    com.example.version: "1.0"
                    com.example.license: GPL
                  MacAddress: ""
                  AttachStderr: false
                  WorkingDir: ""
                  User: ""
                RootFS:
                  Type: layers
                  Layers:
                    - sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6
                    - sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
        404:
          description: No such image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such image: someimage (tag: latest)'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/{name}/history:
    get:
      tags:
        - Image
      summary: Get the history of an image
      description: Return parent layers of an image.
      operationId: ImageHistory
      parameters:
        - name: name
          in: path
          description: Image name or ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of image layers
          content:
            application/json:
              schema:
                type: array
                items:
                  title: HistoryResponseItem
                  required:
                    - Comment
                    - Created
                    - CreatedBy
                    - Id
                    - Size
                    - Tags
                  type: object
                  properties:
                    Id:
                      type: string
                      nullable: false
                    Created:
                      type: integer
                      format: int64
                      nullable: false
                    CreatedBy:
                      type: string
                      nullable: false
                    Tags:
                      type: array
                      items:
                        type: string
                    Size:
                      type: integer
                      format: int64
                      nullable: false
                    Comment:
                      type: string
                      nullable: false
                  description: individual image layer information in response to ImageHistory
                    operation
                  x-go-name: HistoryResponseItem
              example:
                - Id: 3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710
                  Created: 1398108230
                  CreatedBy: '/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148
                  in /'
                  Tags:
                    - ubuntu:lucid
                    - ubuntu:10.04
                  Size: 182964289
                  Comment: ""
                - Id: 6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8
                  Created: 1398108222
                  CreatedBy: '/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com>
                  - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal
                  -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/'
                  Tags: []
                  Size: 0
                  Comment: ""
                - Id: 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158
                  Created: 1371157430
                  CreatedBy: ""
                  Tags:
                    - scratch12:latest
                    - scratch:latest
                  Size: 0
                  Comment: Imported from -
        404:
          description: No such image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/{name}/push:
    post:
      tags:
        - Image
      summary: Push an image
      description: |
        Push an image to a registry.

        If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.

        The push is cancelled if the HTTP connection is closed.
      operationId: ImagePush
      parameters:
        - name: name
          in: path
          description: Image name or ID.
          required: true
          schema:
            type: string
        - name: tag
          in: query
          description: The tag to associate with the image on the registry.
          schema:
            type: string
        - name: X-Registry-Auth
          in: header
          description: A base64-encoded auth configuration. [See the authentication
            section for details.](#section/Authentication)
          required: true
          schema:
            type: string
      responses:
        200:
          description: No error
          content: {}
        404:
          description: No such image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/{name}/tag:
    post:
      tags:
        - Image
      summary: Tag an image
      description: Tag an image so that it becomes part of a repository.
      operationId: ImageTag
      parameters:
        - name: name
          in: path
          description: Image name or ID to tag.
          required: true
          schema:
            type: string
        - name: repo
          in: query
          description: The repository to tag in. For example, `someuser/someimage`.
          schema:
            type: string
        - name: tag
          in: query
          description: The name of the new tag.
          schema:
            type: string
      responses:
        201:
          description: No error
          content: {}
        400:
          description: Bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: No such image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/{name}:
    delete:
      tags:
        - Image
      summary: Remove an image
      description: |
        Remove an image, along with any untagged parent images that were
        referenced by that image.

        Images can't be removed if they have descendant images, are being
        used by a running container or are being used by a build.
      operationId: ImageDelete
      parameters:
        - name: name
          in: path
          description: Image name or ID
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Remove the image even if it is being used by stopped containers
            or has other tags
          schema:
            type: boolean
            default: false
        - name: noprune
          in: query
          description: Do not delete untagged parent images
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: The image was deleted successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageDeleteResponseItem'
              example:
                - Untagged: 3e2f21a89f
                - Deleted: 3e2f21a89f
                - Deleted: 53b4f83ac9
        404:
          description: No such image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/search:
    get:
      tags:
        - Image
      summary: Search images
      description: Search for an image on Docker Hub.
      operationId: ImageSearch
      parameters:
        - name: term
          in: query
          description: Term to search
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

            - `is-automated=(true|false)`
            - `is-official=(true|false)`
            - `stars=<number>` Matches images that has at least 'number' stars.
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                type: array
                items:
                  title: ImageSearchResponseItem
                  type: object
                  properties:
                    description:
                      type: string
                    is_official:
                      type: boolean
                    is_automated:
                      type: boolean
                    name:
                      type: string
                    star_count:
                      type: integer
              example:
                - description: ""
                  is_official: false
                  is_automated: false
                  name: wma55/u1210sshd
                  star_count: 0
                - description: ""
                  is_official: false
                  is_automated: false
                  name: jdswinbank/sshd
                  star_count: 0
                - description: ""
                  is_official: false
                  is_automated: false
                  name: vgauthier/sshd
                  star_count: 0
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/prune:
    post:
      tags:
        - Image
      summary: Delete unused images
      operationId: ImagePrune
      parameters:
        - name: filters
          in: query
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), prune only
               unused *and* untagged images. When set to `false`
               (or `0`), all unused images are pruned.
            - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                title: ImagePruneResponse
                type: object
                properties:
                  ImagesDeleted:
                    type: array
                    description: Images that were deleted
                    items:
                      $ref: '#/components/schemas/ImageDeleteResponseItem'
                  SpaceReclaimed:
                    type: integer
                    description: Disk space reclaimed in bytes
                    format: int64
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth:
    post:
      tags:
        - System
      summary: Check auth configuration
      description: Validate credentials for a registry and, if available, get an identity
        token for accessing the registry without password.
      operationId: SystemAuth
      requestBody:
        description: Authentication to check
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthConfig'
        required: false
      responses:
        200:
          description: An identity token was generated successfully.
          content:
            application/json:
              schema:
                title: SystemAuthResponse
                required:
                  - Status
                type: object
                properties:
                  Status:
                    type: string
                    description: The status of the authentication
                    nullable: false
                  IdentityToken:
                    type: string
                    description: An opaque token used to authenticate a user after
                      a successful login
                    nullable: false
              example:
                Status: Login Succeeded
                IdentityToken: 9cbaf023786cd7...
        204:
          description: No error
          content: {}
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: authConfig
  /info:
    get:
      tags:
        - System
      summary: Get system information
      operationId: SystemInfo
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /version:
    get:
      tags:
        - System
      summary: Get version
      description: Returns the version of Docker that is running and various information
        about the system that Docker is running on.
      operationId: SystemVersion
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                title: SystemVersionResponse
                type: object
                properties:
                  Platform:
                    required:
                      - Name
                    type: object
                    properties:
                      Name:
                        type: string
                  Components:
                    type: array
                    items:
                      required:
                        - Name
                        - Version
                      type: object
                      properties:
                        Name:
                          type: string
                        Version:
                          type: string
                          nullable: false
                        Details:
                          type: object
                          properties: {}
                          nullable: true
                      x-go-name: ComponentVersion
                  Version:
                    type: string
                  ApiVersion:
                    type: string
                  MinAPIVersion:
                    type: string
                  GitCommit:
                    type: string
                  GoVersion:
                    type: string
                  Os:
                    type: string
                  Arch:
                    type: string
                  KernelVersion:
                    type: string
                  Experimental:
                    type: boolean
                  BuildTime:
                    type: string
              example:
                Version: 17.04.0
                Os: linux
                KernelVersion: 3.19.0-23-generic
                GoVersion: go1.7.5
                GitCommit: deadbee
                Arch: amd64
                ApiVersion: "1.27"
                MinAPIVersion: "1.12"
                BuildTime: 2016-06-14
                Experimental: true
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /_ping:
    get:
      tags:
        - System
      summary: Ping
      description: This is a dummy endpoint you can use to test if the server is accessible.
      operationId: SystemPing
      responses:
        200:
          description: no error
          headers:
            Docker-Experimental:
              description: If the server is running with experimental mode enabled
              schema:
                type: boolean
            Cache-Control:
              schema:
                type: string
                default: no-cache, no-store, must-revalidate
            BuildKit-Version:
              description: Default version of docker image builder
              schema:
                type: string
            Pragma:
              schema:
                type: string
                default: no-cache
            API-Version:
              description: Max API Version the server supports
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
                example: OK
        500:
          description: server error
          headers:
            Cache-Control:
              schema:
                type: string
                default: no-cache, no-store, must-revalidate
            Pragma:
              schema:
                type: string
                default: no-cache
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    head:
      tags:
        - System
      summary: Ping
      description: This is a dummy endpoint you can use to test if the server is accessible.
      operationId: SystemPingHead
      responses:
        200:
          description: no error
          headers:
            Docker-Experimental:
              description: If the server is running with experimental mode enabled
              schema:
                type: boolean
            Cache-Control:
              schema:
                type: string
                default: no-cache, no-store, must-revalidate
            BuildKit-Version:
              description: Default version of docker image builder
              schema:
                type: string
            Pragma:
              schema:
                type: string
                default: no-cache
            API-Version:
              description: Max API Version the server supports
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
                example: (empty)
        500:
          description: server error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commit:
    post:
      tags:
        - Image
      summary: Create a new image from a container
      operationId: ImageCommit
      parameters:
        - name: container
          in: query
          description: The ID or name of the container to commit
          schema:
            type: string
        - name: repo
          in: query
          description: Repository name for the created image
          schema:
            type: string
        - name: tag
          in: query
          description: Tag name for the create image
          schema:
            type: string
        - name: comment
          in: query
          description: Commit message
          schema:
            type: string
        - name: author
          in: query
          description: Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
          schema:
            type: string
        - name: pause
          in: query
          description: Whether to pause the container before committing
          schema:
            type: boolean
            default: true
        - name: changes
          in: query
          description: '`Dockerfile` instructions to apply while committing'
          schema:
            type: string
      requestBody:
        description: The container configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerConfig'
        required: false
      responses:
        201:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: containerConfig
  /events:
    get:
      tags:
        - System
      summary: Monitor events
      description: |
        Stream real-time events from the server.

        Various objects within Docker report events when something happens to them.

        Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, and `update`

        Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, and `untag`

        Volumes report these events: `create`, `mount`, `unmount`, and `destroy`

        Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, and `remove`

        The Docker daemon reports these events: `reload`

        Services report these events: `create`, `update`, and `remove`

        Nodes report these events: `create`, `update`, and `remove`

        Secrets report these events: `create`, `update`, and `remove`

        Configs report these events: `create`, `update`, and `remove`
      operationId: SystemEvents
      parameters:
        - name: since
          in: query
          description: Show events created since this timestamp then stream new events.
          schema:
            type: string
        - name: until
          in: query
          description: Show events created until this timestamp then stop streaming.
          schema:
            type: string
        - name: filters
          in: query
          description: |
            A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:

            - `config=<string>` config name or ID
            - `container=<string>` container name or ID
            - `daemon=<string>` daemon name or ID
            - `event=<string>` event type
            - `image=<string>` image name or ID
            - `label=<string>` image or container label
            - `network=<string>` network name or ID
            - `node=<string>` node ID
            - `plugin`=<string> plugin name or ID
            - `scope`=<string> local or swarm
            - `secret=<string>` secret name or ID
            - `service=<string>` service name or ID
            - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
            - `volume=<string>` volume name
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                title: SystemEventsResponse
                type: object
                properties:
                  Type:
                    type: string
                    description: The type of object emitting the event
                  Action:
                    type: string
                    description: The type of event
                  Actor:
                    type: object
                    properties:
                      ID:
                        type: string
                        description: The ID of the object emitting the event
                      Attributes:
                        type: object
                        additionalProperties:
                          type: string
                        description: Various key/value attributes of the object, depending
                          on its type
                  time:
                    type: integer
                    description: Timestamp of event
                  timeNano:
                    type: integer
                    description: Timestamp of event, with nanosecond accuracy
                    format: int64
              example:
                Type: container
                Action: create
                Actor:
                  ID: ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743
                  Attributes:
                    com.example.some-label: some-label-value
                    image: alpine
                    name: my-container
                time: 1461943101
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/df:
    get:
      tags:
        - System
      summary: Get data usage information
      operationId: SystemDataUsage
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                title: SystemDataUsageResponse
                type: object
                properties:
                  LayersSize:
                    type: integer
                    format: int64
                  Images:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageSummary'
                  Containers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContainerSummary'
                  Volumes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Volume'
                  BuildCache:
                    type: array
                    items:
                      $ref: '#/components/schemas/BuildCache'
                example:
                  LayersSize: 1092588
                  Images:
                    - Id: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      ParentId: ""
                      RepoTags:
                        - busybox:latest
                      RepoDigests:
                        - busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6
                      Created: 1466724217
                      Size: 1092588
                      SharedSize: 0
                      VirtualSize: 1092588
                      Labels: {}
                      Containers: 1
                  Containers:
                    - Id: e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148
                      Names:
                        - /top
                      Image: busybox
                      ImageID: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      Command: top
                      Created: 1472592424
                      Ports: []
                      SizeRootFs: 1092588
                      Labels: {}
                      State: exited
                      Status: Exited (0) 56 minutes ago
                      HostConfig:
                        NetworkMode: default
                      NetworkSettings:
                        Networks:
                          bridge:
                            NetworkID: d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92
                            EndpointID: 8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a
                            Gateway: 172.18.0.1
                            IPAddress: 172.18.0.2
                            IPPrefixLen: 16
                            IPv6Gateway: ""
                            GlobalIPv6Address: ""
                            GlobalIPv6PrefixLen: 0
                            MacAddress: 02:42:ac:12:00:02
                      Mounts: []
                  Volumes:
                    - Name: my-volume
                      Driver: local
                      Mountpoint: /var/lib/docker/volumes/my-volume/_data
                      Scope: local
                      UsageData:
                        Size: 10920104
                        RefCount: 2
            text/plain:
              schema:
                title: SystemDataUsageResponse
                type: object
                properties:
                  LayersSize:
                    type: integer
                    format: int64
                  Images:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageSummary'
                  Containers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContainerSummary'
                  Volumes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Volume'
                  BuildCache:
                    type: array
                    items:
                      $ref: '#/components/schemas/BuildCache'
                example:
                  LayersSize: 1092588
                  Images:
                    - Id: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      ParentId: ""
                      RepoTags:
                        - busybox:latest
                      RepoDigests:
                        - busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6
                      Created: 1466724217
                      Size: 1092588
                      SharedSize: 0
                      VirtualSize: 1092588
                      Labels: {}
                      Containers: 1
                  Containers:
                    - Id: e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148
                      Names:
                        - /top
                      Image: busybox
                      ImageID: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      Command: top
                      Created: 1472592424
                      Ports: []
                      SizeRootFs: 1092588
                      Labels: {}
                      State: exited
                      Status: Exited (0) 56 minutes ago
                      HostConfig:
                        NetworkMode: default
                      NetworkSettings:
                        Networks:
                          bridge:
                            NetworkID: d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92
                            EndpointID: 8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a
                            Gateway: 172.18.0.1
                            IPAddress: 172.18.0.2
                            IPPrefixLen: 16
                            IPv6Gateway: ""
                            GlobalIPv6Address: ""
                            GlobalIPv6PrefixLen: 0
                            MacAddress: 02:42:ac:12:00:02
                      Mounts: []
                  Volumes:
                    - Name: my-volume
                      Driver: local
                      Mountpoint: /var/lib/docker/volumes/my-volume/_data
                      Scope: local
                      UsageData:
                        Size: 10920104
                        RefCount: 2
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/{name}/get:
    get:
      tags:
        - Image
      summary: Export an image
      description: |
        Get a tarball containing all images and metadata for a repository.

        If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.

        ### Image tarball format

        An image tarball contains one directory per image layer (named using its long ID), each containing these files:

        - `VERSION`: currently `1.0` - the file format version
        - `json`: detailed layer information, similar to `docker inspect layer_id`
        - `layer.tar`: A tarfile containing the filesystem changes in this layer

        The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.

        If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.

        ```json
        {
          "hello-world": {
            "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
          }
        }
        ```
      operationId: ImageGet
      parameters:
        - name: name
          in: path
          description: Image name or ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/x-tar:
              schema:
                type: string
                format: binary
        500:
          description: server error
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/get:
    get:
      tags:
        - Image
      summary: Export several images
      description: |
        Get a tarball containing all images and metadata for several image repositories.

        For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.

        For details on the format, see [the export image endpoint](#operation/ImageGet).
      operationId: ImageGetAll
      parameters:
        - name: names
          in: query
          description: Image names to filter by
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: no error
          content:
            application/x-tar:
              schema:
                type: string
                format: binary
        500:
          description: server error
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/load:
    post:
      tags:
        - Image
      summary: Import images
      description: |
        Load a set of images and tags into a repository.

        For details on the format, see [the export image endpoint](#operation/ImageGet).
      operationId: ImageLoad
      parameters:
        - name: quiet
          in: query
          description: Suppress progress details during load.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Tar archive containing images
        content:
          application/x-tar:
            schema:
              type: string
              format: binary
        required: false
      responses:
        200:
          description: no error
          content: {}
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: imagesTarball
  /containers/{id}/exec:
    post:
      tags:
        - Exec
      summary: Create an exec instance
      description: Run a command inside a running container.
      operationId: ContainerExec
      parameters:
        - name: id
          in: path
          description: ID or name of container
          required: true
          schema:
            type: string
      requestBody:
        description: Exec configuration
        content:
          application/json:
            schema:
              type: object
              properties:
                AttachStdin:
                  type: boolean
                  description: Attach to `stdin` of the exec command.
                AttachStdout:
                  type: boolean
                  description: Attach to `stdout` of the exec command.
                AttachStderr:
                  type: boolean
                  description: Attach to `stderr` of the exec command.
                DetachKeys:
                  type: string
                  description: 'Override the key sequence for detaching a container.
                    Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>`
                    is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.'
                Tty:
                  type: boolean
                  description: Allocate a pseudo-TTY.
                Env:
                  type: array
                  description: A list of environment variables in the form `["VAR=value",
                    ...]`.
                  items:
                    type: string
                Cmd:
                  type: array
                  description: Command to run, as a string or array of strings.
                  items:
                    type: string
                Privileged:
                  type: boolean
                  description: Runs the exec process with extended privileges.
                  default: false
                User:
                  type: string
                  description: 'The user, and optionally, group to run the exec process
                    inside the container. Format is one of: `user`, `user:group`,
                    `uid`, or `uid:gid`.'
                WorkingDir:
                  type: string
                  description: The working directory for the exec process inside the
                    container.
              example:
                AttachStdin: false
                AttachStdout: true
                AttachStderr: true
                DetachKeys: ctrl-p,ctrl-q
                Tty: false
                Cmd:
                  - date
                Env:
                  - FOO=bar
                  - BAZ=quux
        required: true
      responses:
        201:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        404:
          description: no such container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such container: c2ada9df5af8'
        409:
          description: container is paused
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: execConfig
  /exec/{id}/start:
    post:
      tags:
        - Exec
      summary: Start an exec instance
      description: Starts a previously set up exec instance. If detach is true, this
        endpoint returns immediately after starting the command. Otherwise, it sets
        up an interactive session with the command.
      operationId: ExecStart
      parameters:
        - name: id
          in: path
          description: Exec instance ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Detach:
                  type: boolean
                  description: Detach from the command.
                Tty:
                  type: boolean
                  description: Allocate a pseudo-TTY.
              example:
                Detach: false
                Tty: false
        required: false
      responses:
        200:
          description: No error
          content: {}
        404:
          description: No such exec instance
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Container is stopped or paused
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: execStartConfig
  /exec/{id}/resize:
    post:
      tags:
        - Exec
      summary: Resize an exec instance
      description: Resize the TTY session used by an exec instance. This endpoint
        only works if `tty` was specified as part of creating and starting the exec
        instance.
      operationId: ExecResize
      parameters:
        - name: id
          in: path
          description: Exec instance ID
          required: true
          schema:
            type: string
        - name: h
          in: query
          description: Height of the TTY session in characters
          schema:
            type: integer
        - name: w
          in: query
          description: Width of the TTY session in characters
          schema:
            type: integer
      responses:
        201:
          description: No error
          content: {}
        404:
          description: No such exec instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /exec/{id}/json:
    get:
      tags:
        - Exec
      summary: Inspect an exec instance
      description: Return low-level information about an exec instance.
      operationId: ExecInspect
      parameters:
        - name: id
          in: path
          description: Exec instance ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                title: ExecInspectResponse
                type: object
                properties:
                  CanRemove:
                    type: boolean
                  DetachKeys:
                    type: string
                  ID:
                    type: string
                  Running:
                    type: boolean
                  ExitCode:
                    type: integer
                  ProcessConfig:
                    $ref: '#/components/schemas/ProcessConfig'
                  OpenStdin:
                    type: boolean
                  OpenStderr:
                    type: boolean
                  OpenStdout:
                    type: boolean
                  ContainerID:
                    type: string
                  Pid:
                    type: integer
                    description: The system process ID for the exec process.
              example:
                CanRemove: false
                ContainerID: b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126
                DetachKeys: ""
                ExitCode: 2
                ID: f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b
                OpenStderr: true
                OpenStdin: true
                OpenStdout: true
                ProcessConfig:
                  arguments:
                    - -c
                    - exit 2
                  entrypoint: sh
                  privileged: false
                  tty: true
                  user: "1000"
                Running: false
                Pid: 42000
        404:
          description: No such exec instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /volumes:
    get:
      tags:
        - Volume
      summary: List volumes
      operationId: VolumeList
      parameters:
        - name: filters
          in: query
          description: |
            JSON encoded value of the filters (a `map[string][]string`) to
            process on the volumes list. Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), returns all
               volumes that are not in use by a container. When set to `false`
               (or `0`), only volumes that are in use by one or more
               containers are returned.
            - `driver=<volume-driver-name>` Matches volumes based on their driver.
            - `label=<key>` or `label=<key>:<value>` Matches volumes based on
               the presence of a `label` alone or a `label` and a value.
            - `name=<volume-name>` Matches all or part of a volume name.
          schema:
            type: string
            format: json
      responses:
        200:
          description: Summary volume data that matches the query
          content:
            application/json:
              schema:
                title: VolumeListResponse
                required:
                  - Volumes
                  - Warnings
                type: object
                properties:
                  Volumes:
                    type: array
                    description: List of volumes
                    nullable: false
                    items:
                      $ref: '#/components/schemas/Volume'
                  Warnings:
                    type: array
                    description: Warnings that occurred when fetching the list of
                      volumes
                    nullable: false
                    items:
                      type: string
                description: Volume list response
              example:
                Volumes:
                  - CreatedAt: 2017-07-19T12:00:26Z
                    Name: tardis
                    Driver: local
                    Mountpoint: /var/lib/docker/volumes/tardis
                    Labels:
                      com.example.some-label: some-value
                      com.example.some-other-label: some-other-value
                    Scope: local
                    Options:
                      device: tmpfs
                      o: size=100m,uid=1000
                      type: tmpfs
                Warnings: []
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /volumes/create:
    post:
      tags:
        - Volume
      summary: Create a volume
      operationId: VolumeCreate
      requestBody:
        description: Volume configuration
        content:
          application/json:
            schema:
              title: VolumeConfig
              type: object
              properties:
                Name:
                  type: string
                  description: The new volume's name. If not specified, Docker generates
                    a name.
                  nullable: false
                Driver:
                  type: string
                  description: Name of the volume driver to use.
                  nullable: false
                  default: local
                DriverOpts:
                  type: object
                  additionalProperties:
                    type: string
                  description: A mapping of driver options and values. These options
                    are passed directly to the driver and are driver specific.
                Labels:
                  type: object
                  additionalProperties:
                    type: string
                  description: User-defined key/value metadata.
              description: Volume configuration
              example:
                Name: tardis
                Labels:
                  com.example.some-label: some-value
                  com.example.some-other-label: some-other-value
                Driver: custom
        required: true
      responses:
        201:
          description: The volume was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: volumeConfig
  /volumes/{name}:
    get:
      tags:
        - Volume
      summary: Inspect a volume
      operationId: VolumeInspect
      parameters:
        - name: name
          in: path
          description: Volume name or ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        404:
          description: No such volume
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Volume
      summary: Remove a volume
      description: Instruct the driver to remove the volume.
      operationId: VolumeDelete
      parameters:
        - name: name
          in: path
          description: Volume name or ID
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Force the removal of the volume
          schema:
            type: boolean
            default: false
      responses:
        204:
          description: The volume was removed
          content: {}
        404:
          description: No such volume or volume driver
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Volume is in use and cannot be removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /volumes/prune:
    post:
      tags:
        - Volume
      summary: Delete unused volumes
      operationId: VolumePrune
      parameters:
        - name: filters
          in: query
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                title: VolumePruneResponse
                type: object
                properties:
                  VolumesDeleted:
                    type: array
                    description: Volumes that were deleted
                    items:
                      type: string
                  SpaceReclaimed:
                    type: integer
                    description: Disk space reclaimed in bytes
                    format: int64
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /networks:
    get:
      tags:
        - Network
      summary: List networks
      description: |
        Returns a list of networks. For details on the format, see [the network inspect endpoint](#operation/NetworkInspect).

        Note that it uses a different, smaller representation of a network than inspecting a single network. For example,
        the list of containers attached to the network is not propagated in API versions 1.28 and up.
      operationId: NetworkList
      parameters:
        - name: filters
          in: query
          description: |
            JSON encoded value of the filters (a `map[string][]string`) to process on the networks list. Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), returns all
               networks that are not in use by a container. When set to `false`
               (or `0`), only networks that are in use by one or more
               containers are returned.
            - `driver=<driver-name>` Matches a network's driver.
            - `id=<network-id>` Matches all or part of a network ID.
            - `label=<key>` or `label=<key>=<value>` of a network label.
            - `name=<network-name>` Matches all or part of a network name.
            - `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
            - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Network'
              example:
                - Name: bridge
                  Id: f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566
                  Created: 2016-10-19
                  Scope: local
                  Driver: bridge
                  EnableIPv6: false
                  Internal: false
                  Attachable: false
                  Ingress: false
                  IPAM:
                    Driver: default
                    Config:
                      - Subnet: 172.17.0.0/16
                  Options:
                    com.docker.network.bridge.default_bridge: "true"
                    com.docker.network.bridge.enable_icc: "true"
                    com.docker.network.bridge.enable_ip_masquerade: "true"
                    com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                    com.docker.network.bridge.name: docker0
                    com.docker.network.driver.mtu: "1500"
                - Name: none
                  Id: e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794
                  Created: 0001-01-01T00:00:00Z
                  Scope: local
                  Driver: null
                  EnableIPv6: false
                  Internal: false
                  Attachable: false
                  Ingress: false
                  IPAM:
                    Driver: default
                    Config: []
                  Containers: {}
                  Options: {}
                - Name: host
                  Id: 13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e
                  Created: 0001-01-01T00:00:00Z
                  Scope: local
                  Driver: host
                  EnableIPv6: false
                  Internal: false
                  Attachable: false
                  Ingress: false
                  IPAM:
                    Driver: default
                    Config: []
                  Containers: {}
                  Options: {}
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /networks/{id}:
    get:
      tags:
        - Network
      summary: Inspect a network
      operationId: NetworkInspect
      parameters:
        - name: id
          in: path
          description: Network ID or name
          required: true
          schema:
            type: string
        - name: verbose
          in: query
          description: Detailed inspect output for troubleshooting
          schema:
            type: boolean
            default: false
        - name: scope
          in: query
          description: Filter the network by scope (swarm, global, or local)
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        404:
          description: Network not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Network
      summary: Remove a network
      operationId: NetworkDelete
      parameters:
        - name: id
          in: path
          description: Network ID or name
          required: true
          schema:
            type: string
      responses:
        204:
          description: No error
          content: {}
        403:
          description: operation not supported for pre-defined networks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /networks/create:
    post:
      tags:
        - Network
      summary: Create a network
      operationId: NetworkCreate
      requestBody:
        description: Network configuration
        content:
          application/json:
            schema:
              required:
                - Name
              type: object
              properties:
                Name:
                  type: string
                  description: The network's name.
                CheckDuplicate:
                  type: boolean
                  description: Check for networks with duplicate names. Since Network
                    is primarily keyed based on a random ID and not on the name, and
                    network name is strictly a user-friendly alias to the network
                    which is uniquely identified using ID, there is no guaranteed
                    way to check for duplicates. CheckDuplicate is there to provide
                    a best effort checking of any networks which has the same name
                    but it is not guaranteed to catch all name collisions.
                Driver:
                  type: string
                  description: Name of the network driver plugin to use.
                  default: bridge
                Internal:
                  type: boolean
                  description: Restrict external access to the network.
                Attachable:
                  type: boolean
                  description: Globally scoped network is manually attachable by regular
                    containers from workers in swarm mode.
                Ingress:
                  type: boolean
                  description: Ingress network is the network which provides the routing-mesh
                    in swarm mode.
                IPAM:
                  $ref: '#/components/schemas/IPAM'
                EnableIPv6:
                  type: boolean
                  description: Enable IPv6 on the network.
                Options:
                  type: object
                  additionalProperties:
                    type: string
                  description: Network specific options to be used by the drivers.
                Labels:
                  type: object
                  additionalProperties:
                    type: string
                  description: User-defined key/value metadata.
              example:
                Name: isolated_nw
                CheckDuplicate: false
                Driver: bridge
                EnableIPv6: true
                IPAM:
                  Driver: default
                  Config:
                    - Subnet: 172.20.0.0/16
                      IPRange: 172.20.10.0/24
                      Gateway: 172.20.10.11
                    - Subnet: 2001:db8:abcd::/64
                      Gateway: 2001:db8:abcd::1011
                  Options:
                    foo: bar
                Internal: true
                Attachable: false
                Ingress: false
                Options:
                  com.docker.network.bridge.default_bridge: "true"
                  com.docker.network.bridge.enable_icc: "true"
                  com.docker.network.bridge.enable_ip_masquerade: "true"
                  com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                  com.docker.network.bridge.name: docker0
                  com.docker.network.driver.mtu: "1500"
                Labels:
                  com.example.some-label: some-value
                  com.example.some-other-label: some-other-value
        required: true
      responses:
        201:
          description: No error
          content:
            application/json:
              schema:
                title: NetworkCreateResponse
                type: object
                properties:
                  Id:
                    type: string
                    description: The ID of the created network.
                  Warning:
                    type: string
                example:
                  Id: 22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30
                  Warning: ""
        403:
          description: operation not supported for pre-defined networks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: plugin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: networkConfig
  /networks/{id}/connect:
    post:
      tags:
        - Network
      summary: Connect a container to a network
      operationId: NetworkConnect
      parameters:
        - name: id
          in: path
          description: Network ID or name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Container:
                  type: string
                  description: The ID or name of the container to connect to the network.
                EndpointConfig:
                  $ref: '#/components/schemas/EndpointSettings'
              example:
                Container: 3613f73ba0e4
                EndpointConfig:
                  IPAMConfig:
                    IPv4Address: 172.24.56.89
                    IPv6Address: 2001:db8::5689
        required: true
      responses:
        200:
          description: No error
          content: {}
        403:
          description: Operation not supported for swarm scoped networks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Network or container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: container
  /networks/{id}/disconnect:
    post:
      tags:
        - Network
      summary: Disconnect a container from a network
      operationId: NetworkDisconnect
      parameters:
        - name: id
          in: path
          description: Network ID or name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Container:
                  type: string
                  description: The ID or name of the container to disconnect from
                    the network.
                Force:
                  type: boolean
                  description: Force the container to disconnect from the network.
        required: true
      responses:
        200:
          description: No error
          content: {}
        403:
          description: Operation not supported for swarm scoped networks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Network or container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: container
  /networks/prune:
    post:
      tags:
        - Network
      summary: Delete unused networks
      operationId: NetworkPrune
      parameters:
        - name: filters
          in: query
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                title: NetworkPruneResponse
                type: object
                properties:
                  NetworksDeleted:
                    type: array
                    description: Networks that were deleted
                    items:
                      type: string
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins:
    get:
      tags:
        - Plugin
      summary: List plugins
      description: Returns information about installed plugins.
      operationId: PluginList
      parameters:
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the plugin list. Available filters:

            - `capability=<capability name>`
            - `enable=<true>|<false>`
          schema:
            type: string
      responses:
        200:
          description: No error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins/privileges:
    get:
      tags:
        - Plugin
      summary: Get plugin privileges
      operationId: GetPluginPrivileges
      parameters:
        - name: remote
          in: query
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: array
                example:
                  - Name: network
                    Description: ""
                    Value:
                      - host
                  - Name: mount
                    Description: ""
                    Value:
                      - /data
                  - Name: device
                    Description: ""
                    Value:
                      - /dev/cpu_dma_latency
                items:
                  title: PluginPrivilegeItem
                  type: object
                  properties:
                    Name:
                      type: string
                    Description:
                      type: string
                    Value:
                      type: array
                      items:
                        type: string
                  description: Describes a permission the user has to accept upon
                    installing the plugin.
            text/plain:
              schema:
                type: array
                example:
                  - Name: network
                    Description: ""
                    Value:
                      - host
                  - Name: mount
                    Description: ""
                    Value:
                      - /data
                  - Name: device
                    Description: ""
                    Value:
                      - /dev/cpu_dma_latency
                items:
                  title: PluginPrivilegeItem
                  type: object
                  properties:
                    Name:
                      type: string
                    Description:
                      type: string
                    Value:
                      type: array
                      items:
                        type: string
                  description: Describes a permission the user has to accept upon
                    installing the plugin.
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins/pull:
    post:
      tags:
        - Plugin
      summary: Install a plugin
      description: |
        Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
      operationId: PluginPull
      parameters:
        - name: remote
          in: query
          description: |
            Remote reference for plugin to install.

            The `:latest` tag is optional, and is used as the default if omitted.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: |
            Local name for the pulled plugin.

            The `:latest` tag is optional, and is used as the default if omitted.
          schema:
            type: string
        - name: X-Registry-Auth
          in: header
          description: A base64-encoded auth configuration to use when pulling a plugin
            from a registry. [See the authentication section for details.](#section/Authentication)
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example:
                - Name: network
                  Description: ""
                  Value:
                    - host
                - Name: mount
                  Description: ""
                  Value:
                    - /data
                - Name: device
                  Description: ""
                  Value:
                    - /dev/cpu_dma_latency
              items:
                type: object
                properties:
                  Name:
                    type: string
                  Description:
                    type: string
                  Value:
                    type: array
                    items:
                      type: string
                description: Describes a permission accepted by the user upon installing
                  the plugin.
          text/plain:
            schema:
              type: array
              example:
                - Name: network
                  Description: ""
                  Value:
                    - host
                - Name: mount
                  Description: ""
                  Value:
                    - /data
                - Name: device
                  Description: ""
                  Value:
                    - /dev/cpu_dma_latency
              items:
                type: object
                properties:
                  Name:
                    type: string
                  Description:
                    type: string
                  Value:
                    type: array
                    items:
                      type: string
                description: Describes a permission accepted by the user upon installing
                  the plugin.
        required: false
      responses:
        204:
          description: no error
          content: {}
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /plugins/{name}/json:
    get:
      tags:
        - Plugin
      summary: Inspect a plugin
      operationId: PluginInspect
      parameters:
        - name: name
          in: path
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
            text/plain:
              schema:
                $ref: '#/components/schemas/Plugin'
        404:
          description: plugin is not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins/{name}:
    delete:
      tags:
        - Plugin
      summary: Remove a plugin
      operationId: PluginDelete
      parameters:
        - name: name
          in: path
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Disable the plugin before removing. This may result in issues
            if the plugin is in use by a container.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
            text/plain:
              schema:
                $ref: '#/components/schemas/Plugin'
        404:
          description: plugin is not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins/{name}/enable:
    post:
      tags:
        - Plugin
      summary: Enable a plugin
      operationId: PluginEnable
      parameters:
        - name: name
          in: path
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
        - name: timeout
          in: query
          description: Set the HTTP client timeout (in seconds)
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: no error
          content: {}
        404:
          description: plugin is not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins/{name}/disable:
    post:
      tags:
        - Plugin
      summary: Disable a plugin
      operationId: PluginDisable
      parameters:
        - name: name
          in: path
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content: {}
        404:
          description: plugin is not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins/{name}/upgrade:
    post:
      tags:
        - Plugin
      summary: Upgrade a plugin
      operationId: PluginUpgrade
      parameters:
        - name: name
          in: path
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
        - name: remote
          in: query
          description: |
            Remote reference to upgrade to.

            The `:latest` tag is optional, and is used as the default if omitted.
          required: true
          schema:
            type: string
        - name: X-Registry-Auth
          in: header
          description: A base64-encoded auth configuration to use when pulling a plugin
            from a registry. [See the authentication section for details.](#section/Authentication)
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example:
                - Name: network
                  Description: ""
                  Value:
                    - host
                - Name: mount
                  Description: ""
                  Value:
                    - /data
                - Name: device
                  Description: ""
                  Value:
                    - /dev/cpu_dma_latency
              items:
                type: object
                properties:
                  Name:
                    type: string
                  Description:
                    type: string
                  Value:
                    type: array
                    items:
                      type: string
                description: Describes a permission accepted by the user upon installing
                  the plugin.
          text/plain:
            schema:
              type: array
              example:
                - Name: network
                  Description: ""
                  Value:
                    - host
                - Name: mount
                  Description: ""
                  Value:
                    - /data
                - Name: device
                  Description: ""
                  Value:
                    - /dev/cpu_dma_latency
              items:
                type: object
                properties:
                  Name:
                    type: string
                  Description:
                    type: string
                  Value:
                    type: array
                    items:
                      type: string
                description: Describes a permission accepted by the user upon installing
                  the plugin.
        required: false
      responses:
        204:
          description: no error
          content: {}
        404:
          description: plugin not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /plugins/create:
    post:
      tags:
        - Plugin
      summary: Create a plugin
      operationId: PluginCreate
      parameters:
        - name: name
          in: query
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
      requestBody:
        description: Path to tar containing plugin rootfs and manifest
        content:
          application/x-tar:
            schema:
              type: string
              format: binary
        required: false
      responses:
        204:
          description: no error
          content: {}
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: tarContext
  /plugins/{name}/push:
    post:
      tags:
        - Plugin
      summary: Push a plugin
      description: |
        Push a plugin to the registry.
      operationId: PluginPush
      parameters:
        - name: name
          in: path
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content: {}
        404:
          description: plugin not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plugins/{name}/set:
    post:
      tags:
        - Plugin
      summary: Configure a plugin
      operationId: PluginSet
      parameters:
        - name: name
          in: path
          description: The name of the plugin. The `:latest` tag is optional, and is
            the default if omitted.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example:
                - DEBUG=1
              items:
                type: string
        required: false
      responses:
        204:
          description: No error
          content: {}
        404:
          description: Plugin not installed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /nodes:
    get:
      tags:
        - Node
      summary: List nodes
      operationId: NodeList
      parameters:
        - name: filters
          in: query
          description: |
            Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `id=<node id>`
            - `label=<engine label>`
            - `membership=`(`accepted`|`pending`)`
            - `name=<node name>`
            - `node.label=<node label>`
            - `role=`(`manager`|`worker`)`
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes/{id}:
    get:
      tags:
        - Node
      summary: Inspect a node
      operationId: NodeInspect
      parameters:
        - name: id
          in: path
          description: The ID or name of the node
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
            text/plain:
              schema:
                $ref: '#/components/schemas/Node'
        404:
          description: no such node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Node
      summary: Delete a node
      operationId: NodeDelete
      parameters:
        - name: id
          in: path
          description: The ID or name of the node
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Force remove a node from the swarm
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: no error
          content: {}
        404:
          description: no such node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes/{id}/update:
    post:
      tags:
        - Node
      summary: Update a node
      operationId: NodeUpdate
      parameters:
        - name: id
          in: path
          description: The ID of the node
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version number of the node object being updated. This is
            required to avoid conflicting writes.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/NodeSpec'
        required: false
      responses:
        200:
          description: no error
          content: {}
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /swarm:
    get:
      tags:
        - Swarm
      summary: Inspect swarm
      operationId: SwarmInspect
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swarm'
            text/plain:
              schema:
                $ref: '#/components/schemas/Swarm'
        404:
          description: no such swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /swarm/init:
    post:
      tags:
        - Swarm
      summary: Initialize a new swarm
      operationId: SwarmInit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ListenAddr:
                  type: string
                  description: Listen address used for inter-manager communication,
                    as well as determining the networking interface used for the VXLAN
                    Tunnel Endpoint (VTEP). This can either be an address/port combination
                    in the form `192.168.1.1:4567`, or an interface followed by a
                    port number, like `eth0:4567`. If the port number is omitted,
                    the default swarm listening port is used.
                AdvertiseAddr:
                  type: string
                  description: Externally reachable address advertised to other nodes.
                    This can either be an address/port combination in the form `192.168.1.1:4567`,
                    or an interface followed by a port number, like `eth0:4567`. If
                    the port number is omitted, the port number from the listen address
                    is used. If `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                DataPathAddr:
                  type: string
                  description: |
                    Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
                    is used.

                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
                    nodes in order to reach the containers running on this node. Using this parameter it is possible to
                    separate the container data traffic from the management traffic of the cluster.
                DataPathPort:
                  type: integer
                  description: |
                    DataPathPort specifies the data path port number for data traffic.
                    Acceptable port range is 1024 to 49151.
                    if no port is set or is set to 0, default port 4789 will be used.
                  format: uint32
                DefaultAddrPool:
                  type: array
                  description: |
                    Default Address Pool specifies default subnet pools for global scope networks.
                  items:
                    type: string
                    example: ""
                ForceNewCluster:
                  type: boolean
                  description: Force creation of a new swarm.
                SubnetSize:
                  type: integer
                  description: |
                    SubnetSize specifies the subnet size of the networks created from the default subnet pool
                  format: uint32
                Spec:
                  $ref: '#/components/schemas/SwarmSpec'
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                DataPathPort: 4789
                DefaultAddrPool:
                  - 10.10.0.0/8
                  - 20.20.0.0/8
                SubnetSize: 24
                ForceNewCluster: false
                Spec:
                  Orchestration: {}
                  Raft: {}
                  Dispatcher: {}
                  CAConfig: {}
                  EncryptionConfig:
                    AutoLockManagers: false
          text/plain:
            schema:
              type: object
              properties:
                ListenAddr:
                  type: string
                  description: Listen address used for inter-manager communication,
                    as well as determining the networking interface used for the VXLAN
                    Tunnel Endpoint (VTEP). This can either be an address/port combination
                    in the form `192.168.1.1:4567`, or an interface followed by a
                    port number, like `eth0:4567`. If the port number is omitted,
                    the default swarm listening port is used.
                AdvertiseAddr:
                  type: string
                  description: Externally reachable address advertised to other nodes.
                    This can either be an address/port combination in the form `192.168.1.1:4567`,
                    or an interface followed by a port number, like `eth0:4567`. If
                    the port number is omitted, the port number from the listen address
                    is used. If `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                DataPathAddr:
                  type: string
                  description: |
                    Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
                    is used.

                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
                    nodes in order to reach the containers running on this node. Using this parameter it is possible to
                    separate the container data traffic from the management traffic of the cluster.
                DataPathPort:
                  type: integer
                  description: |
                    DataPathPort specifies the data path port number for data traffic.
                    Acceptable port range is 1024 to 49151.
                    if no port is set or is set to 0, default port 4789 will be used.
                  format: uint32
                DefaultAddrPool:
                  type: array
                  description: |
                    Default Address Pool specifies default subnet pools for global scope networks.
                  items:
                    type: string
                    example: ""
                ForceNewCluster:
                  type: boolean
                  description: Force creation of a new swarm.
                SubnetSize:
                  type: integer
                  description: |
                    SubnetSize specifies the subnet size of the networks created from the default subnet pool
                  format: uint32
                Spec:
                  $ref: '#/components/schemas/SwarmSpec'
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                DataPathPort: 4789
                DefaultAddrPool:
                  - 10.10.0.0/8
                  - 20.20.0.0/8
                SubnetSize: 24
                ForceNewCluster: false
                Spec:
                  Orchestration: {}
                  Raft: {}
                  Dispatcher: {}
                  CAConfig: {}
                  EncryptionConfig:
                    AutoLockManagers: false
        required: true
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: string
                description: The node ID
                example: 7v2t30z9blmxuhnyo6s4cpenp
            text/plain:
              schema:
                type: string
                description: The node ID
                example: 7v2t30z9blmxuhnyo6s4cpenp
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is already part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /swarm/join:
    post:
      tags:
        - Swarm
      summary: Join an existing swarm
      operationId: SwarmJoin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ListenAddr:
                  type: string
                  description: Listen address used for inter-manager communication
                    if the node gets promoted to manager, as well as determining the
                    networking interface used for the VXLAN Tunnel Endpoint (VTEP).
                AdvertiseAddr:
                  type: string
                  description: Externally reachable address advertised to other nodes.
                    This can either be an address/port combination in the form `192.168.1.1:4567`,
                    or an interface followed by a port number, like `eth0:4567`. If
                    the port number is omitted, the port number from the listen address
                    is used. If `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                DataPathAddr:
                  type: string
                  description: |
                    Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
                    is used.

                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
                    nodes in order to reach the containers running on this node. Using this parameter it is possible to
                    separate the container data traffic from the management traffic of the cluster.
                RemoteAddrs:
                  type: array
                  description: Addresses of manager nodes already participating in
                    the swarm.
                  items:
                    type: string
                JoinToken:
                  type: string
                  description: Secret token for joining this swarm.
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                RemoteAddrs:
                  - node1:2377
                JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
          text/plain:
            schema:
              type: object
              properties:
                ListenAddr:
                  type: string
                  description: Listen address used for inter-manager communication
                    if the node gets promoted to manager, as well as determining the
                    networking interface used for the VXLAN Tunnel Endpoint (VTEP).
                AdvertiseAddr:
                  type: string
                  description: Externally reachable address advertised to other nodes.
                    This can either be an address/port combination in the form `192.168.1.1:4567`,
                    or an interface followed by a port number, like `eth0:4567`. If
                    the port number is omitted, the port number from the listen address
                    is used. If `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                DataPathAddr:
                  type: string
                  description: |
                    Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
                    is used.

                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
                    nodes in order to reach the containers running on this node. Using this parameter it is possible to
                    separate the container data traffic from the management traffic of the cluster.
                RemoteAddrs:
                  type: array
                  description: Addresses of manager nodes already participating in
                    the swarm.
                  items:
                    type: string
                JoinToken:
                  type: string
                  description: Secret token for joining this swarm.
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                RemoteAddrs:
                  - node1:2377
                JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
        required: true
      responses:
        200:
          description: no error
          content: {}
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is already part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /swarm/leave:
    post:
      tags:
        - Swarm
      summary: Leave a swarm
      operationId: SwarmLeave
      parameters:
        - name: force
          in: query
          description: Force leave swarm, even if this is the last manager or that it
            will break the cluster.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: no error
          content: {}
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /swarm/update:
    post:
      tags:
        - Swarm
      summary: Update a swarm
      operationId: SwarmUpdate
      parameters:
        - name: version
          in: query
          description: The version number of the swarm object being updated. This is
            required to avoid conflicting writes.
          required: true
          schema:
            type: integer
            format: int64
        - name: rotateWorkerToken
          in: query
          description: Rotate the worker join token.
          schema:
            type: boolean
            default: false
        - name: rotateManagerToken
          in: query
          description: Rotate the manager join token.
          schema:
            type: boolean
            default: false
        - name: rotateManagerUnlockKey
          in: query
          description: Rotate the manager unlock key.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwarmSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/SwarmSpec'
        required: true
      responses:
        200:
          description: no error
          content: {}
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /swarm/unlockkey:
    get:
      tags:
        - Swarm
      summary: Get the unlock key
      operationId: SwarmUnlockkey
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                title: UnlockKeyResponse
                type: object
                properties:
                  UnlockKey:
                    type: string
                    description: The swarm's unlock key.
                example:
                  UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
            text/plain:
              schema:
                title: UnlockKeyResponse
                type: object
                properties:
                  UnlockKey:
                    type: string
                    description: The swarm's unlock key.
                example:
                  UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /swarm/unlock:
    post:
      tags:
        - Swarm
      summary: Unlock a locked manager
      operationId: SwarmUnlock
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UnlockKey:
                  type: string
                  description: The swarm's unlock key.
              example:
                UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
        required: true
      responses:
        200:
          description: no error
          content: {}
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /services:
    get:
      tags:
        - Service
      summary: List services
      operationId: ServiceList
      parameters:
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the services list. Available filters:

            - `id=<service id>`
            - `label=<service label>`
            - `mode=["replicated"|"global"]`
            - `name=<service name>`
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /services/create:
    post:
      tags:
        - Service
      summary: Create a service
      operationId: ServiceCreate
      parameters:
        - name: X-Registry-Auth
          in: header
          description: A base64-encoded auth configuration for pulling from private
            registries. [See the authentication section for details.](#section/Authentication)
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ServiceSpec'
                - type: object
                  example:
                    Name: web
                    TaskTemplate:
                      ContainerSpec:
                        Image: nginx:alpine
                        Mounts:
                          - ReadOnly: true
                            Source: web-data
                            Target: /usr/share/nginx/html
                            Type: volume
                            VolumeOptions:
                              DriverConfig: {}
                              Labels:
                                com.example.something: something-value
                        Hosts:
                          - 10.10.10.10 host1
                          - ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2
                        User: "33"
                        DNSConfig:
                          Nameservers:
                            - 8.8.8.8
                          Search:
                            - example.org
                          Options:
                            - timeout:3
                        Secrets:
                          - File:
                              Name: www.example.org.key
                              UID: "33"
                              GID: "33"
                              Mode: 384
                            SecretID: fpjqlhnwb19zds35k8wn80lq9
                            SecretName: example_org_domain_key
                      LogDriver:
                        Name: json-file
                        Options:
                          max-file: "3"
                          max-size: 10M
                      Placement: {}
                      Resources:
                        Limits:
                          MemoryBytes: 104857600
                        Reservations: {}
                      RestartPolicy:
                        Condition: on-failure
                        Delay: 10000000000
                        MaxAttempts: 10
                    Mode:
                      Replicated:
                        Replicas: 4
                    UpdateConfig:
                      Parallelism: 2
                      Delay: 1000000000
                      FailureAction: pause
                      Monitor: 15000000000
                      MaxFailureRatio: 0.15
                    RollbackConfig:
                      Parallelism: 1
                      Delay: 1000000000
                      FailureAction: pause
                      Monitor: 15000000000
                      MaxFailureRatio: 0.15
                    EndpointSpec:
                      Ports:
                        - Protocol: tcp
                          PublishedPort: 8080
                          TargetPort: 80
                    Labels:
                      foo: bar
        required: true
      responses:
        201:
          description: no error
          content:
            application/json:
              schema:
                title: ServiceCreateResponse
                type: object
                properties:
                  ID:
                    type: string
                    description: The ID of the created service.
                  Warning:
                    type: string
                    description: Optional warning message
                example:
                  ID: ak7w3gjqoa3kuz8xcpnyy0pvl
                  Warning: 'unable to pin image doesnotexist:latest to digest: image
                    library/doesnotexist:latest not found'
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: network is not eligible for services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: name conflicts with an existing service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /services/{id}:
    get:
      tags:
        - Service
      summary: Inspect a service
      operationId: ServiceInspect
      parameters:
        - name: id
          in: path
          description: ID or name of service.
          required: true
          schema:
            type: string
        - name: insertDefaults
          in: query
          description: Fill empty fields with default values.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
            text/plain:
              schema:
                $ref: '#/components/schemas/Service'
        404:
          description: no such service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Service
      summary: Delete a service
      operationId: ServiceDelete
      parameters:
        - name: id
          in: path
          description: ID or name of service.
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content: {}
        404:
          description: no such service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /services/{id}/update:
    post:
      tags:
        - Service
      summary: Update a service
      operationId: ServiceUpdate
      parameters:
        - name: id
          in: path
          description: ID or name of service.
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version number of the service object being updated. This
            is required to avoid conflicting writes. This version number should be the
            value as currently set on the service *before* the update. You can find
            the current version by calling `GET /services/{id}`
          required: true
          schema:
            type: integer
        - name: registryAuthFrom
          in: query
          description: |
            If the `X-Registry-Auth` header is not specified, this parameter
            indicates where to find registry authorization credentials.
          schema:
            type: string
            default: spec
            enum:
              - spec
              - previous-spec
        - name: rollback
          in: query
          description: |
            Set to this parameter to `previous` to cause a server-side rollback
            to the previous service spec. The supplied spec will be ignored in
            this case.
          schema:
            type: string
        - name: X-Registry-Auth
          in: header
          description: A base64-encoded auth configuration for pulling from private
            registries. [See the authentication section for details.](#section/Authentication)
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ServiceSpec'
                - type: object
                  example:
                    Name: top
                    TaskTemplate:
                      ContainerSpec:
                        Image: busybox
                        Args:
                          - top
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                      Placement: {}
                      ForceUpdate: 0
                    Mode:
                      Replicated:
                        Replicas: 1
                    UpdateConfig:
                      Parallelism: 2
                      Delay: 1000000000
                      FailureAction: pause
                      Monitor: 15000000000
                      MaxFailureRatio: 0.15
                    RollbackConfig:
                      Parallelism: 1
                      Delay: 1000000000
                      FailureAction: pause
                      Monitor: 15000000000
                      MaxFailureRatio: 0.15
                    EndpointSpec:
                      Mode: vip
        required: true
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUpdateResponse'
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /services/{id}/logs:
    get:
      tags:
        - Service
      summary: Get service logs
      description: |
        Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).

        **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers.
      operationId: ServiceLogs
      parameters:
        - name: id
          in: path
          description: ID or name of the service
          required: true
          schema:
            type: string
        - name: details
          in: query
          description: Show service context and extra details provided to logs.
          schema:
            type: boolean
            default: false
        - name: follow
          in: query
          description: Keep connection after returning logs.
          schema:
            type: boolean
            default: false
        - name: stdout
          in: query
          description: Return logs from `stdout`
          schema:
            type: boolean
            default: false
        - name: stderr
          in: query
          description: Return logs from `stderr`
          schema:
            type: boolean
            default: false
        - name: since
          in: query
          description: Only return logs since this time, as a UNIX timestamp
          schema:
            type: integer
            default: 0
        - name: timestamps
          in: query
          description: Add timestamps to every log line
          schema:
            type: boolean
            default: false
        - name: tail
          in: query
          description: Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          schema:
            type: string
            default: all
      responses:
        200:
          description: logs returned as a stream in response body
          content:
            application/json:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: binary
        404:
          description: no such service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such service: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tasks:
    get:
      tags:
        - Task
      summary: List tasks
      operationId: TaskList
      parameters:
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list. Available filters:

            - `desired-state=(running | shutdown | accepted)`
            - `id=<task id>`
            - `label=key` or `label="key=value"`
            - `name=<task name>`
            - `node=<node id or name>`
            - `service=<service name>`
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: array
                example:
                  - ID: 0kzzo1i0y4jz6027t0k7aezc7
                    Version:
                      Index: 71
                    CreatedAt: 2016-06-07
                    UpdatedAt: 2016-06-07
                    Spec:
                      ContainerSpec:
                        Image: redis
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                      Placement: {}
                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                    Slot: 1
                    NodeID: 60gvrl6tm78dmak4yl7srz94v
                    Status:
                      Timestamp: 2016-06-07
                      State: running
                      Message: started
                      ContainerStatus:
                        ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
                        PID: 677
                    DesiredState: running
                    NetworksAttachments:
                      - Network:
                          ID: 4qvuz4ko70xaltuqbt8956gd1
                          Version:
                            Index: 18
                          CreatedAt: 2016-06-07
                          UpdatedAt: 2016-06-07
                          Spec:
                            Name: ingress
                            Labels:
                              com.docker.swarm.internal: "true"
                            DriverConfiguration: {}
                            IPAMOptions:
                              Driver: {}
                              Configs:
                                - Subnet: 10.255.0.0/16
                                  Gateway: 10.255.0.1
                          DriverState:
                            Name: overlay
                            Options:
                              com.docker.network.driver.overlay.vxlanid_list: "256"
                          IPAMOptions:
                            Driver:
                              Name: default
                            Configs:
                              - Subnet: 10.255.0.0/16
                                Gateway: 10.255.0.1
                        Addresses:
                          - 10.255.0.10/16
                  - ID: 1yljwbmlr8er2waf8orvqpwms
                    Version:
                      Index: 30
                    CreatedAt: 2016-06-07
                    UpdatedAt: 2016-06-07
                    Name: hopeful_cori
                    Spec:
                      ContainerSpec:
                        Image: redis
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                      Placement: {}
                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                    Slot: 1
                    NodeID: 60gvrl6tm78dmak4yl7srz94v
                    Status:
                      Timestamp: 2016-06-07
                      State: shutdown
                      Message: shutdown
                      ContainerStatus:
                        ContainerID: 1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213
                    DesiredState: shutdown
                    NetworksAttachments:
                      - Network:
                          ID: 4qvuz4ko70xaltuqbt8956gd1
                          Version:
                            Index: 18
                          CreatedAt: 2016-06-07
                          UpdatedAt: 2016-06-07
                          Spec:
                            Name: ingress
                            Labels:
                              com.docker.swarm.internal: "true"
                            DriverConfiguration: {}
                            IPAMOptions:
                              Driver: {}
                              Configs:
                                - Subnet: 10.255.0.0/16
                                  Gateway: 10.255.0.1
                          DriverState:
                            Name: overlay
                            Options:
                              com.docker.network.driver.overlay.vxlanid_list: "256"
                          IPAMOptions:
                            Driver:
                              Name: default
                            Configs:
                              - Subnet: 10.255.0.0/16
                                Gateway: 10.255.0.1
                        Addresses:
                          - 10.255.0.5/16
                items:
                  $ref: '#/components/schemas/Task'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tasks/{id}:
    get:
      tags:
        - Task
      summary: Inspect a task
      operationId: TaskInspect
      parameters:
        - name: id
          in: path
          description: ID of the task
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: no such task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tasks/{id}/logs:
    get:
      tags:
        - Task
      summary: Get task logs
      description: |
        Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).

        **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers.
      operationId: TaskLogs
      parameters:
        - name: id
          in: path
          description: ID of the task
          required: true
          schema:
            type: string
        - name: details
          in: query
          description: Show task context and extra details provided to logs.
          schema:
            type: boolean
            default: false
        - name: follow
          in: query
          description: Keep connection after returning logs.
          schema:
            type: boolean
            default: false
        - name: stdout
          in: query
          description: Return logs from `stdout`
          schema:
            type: boolean
            default: false
        - name: stderr
          in: query
          description: Return logs from `stderr`
          schema:
            type: boolean
            default: false
        - name: since
          in: query
          description: Only return logs since this time, as a UNIX timestamp
          schema:
            type: integer
            default: 0
        - name: timestamps
          in: query
          description: Add timestamps to every log line
          schema:
            type: boolean
            default: false
        - name: tail
          in: query
          description: Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          schema:
            type: string
            default: all
      responses:
        200:
          description: logs returned as a stream in response body
          content:
            application/json:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: binary
        404:
          description: no such task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such task: c2ada9df5af8'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /secrets:
    get:
      tags:
        - Secret
      summary: List secrets
      operationId: SecretList
      parameters:
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Available filters:

            - `id=<secret id>`
            - `label=<key> or label=<key>=value`
            - `name=<secret name>`
            - `names=<secret name>`
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: array
                example:
                  - ID: blt1owaxmitz71s9v5zh81zun
                    Version:
                      Index: 85
                    CreatedAt: 2017-07-20
                    UpdatedAt: 2017-07-20
                    Spec:
                      Name: mysql-passwd
                      Labels:
                        some.label: some.value
                      Driver:
                        Name: secret-bucket
                        Options:
                          OptionA: value for driver option A
                          OptionB: value for driver option B
                  - ID: ktnbjxoalbkvbvedmg1urrz8h
                    Version:
                      Index: 11
                    CreatedAt: 2016-11-05
                    UpdatedAt: 2016-11-05
                    Spec:
                      Name: app-dev.crt
                      Labels:
                        foo: bar
                items:
                  $ref: '#/components/schemas/Secret'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /secrets/create:
    post:
      tags:
        - Secret
      summary: Create a secret
      operationId: SecretCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SecretSpec'
                - type: object
                  example:
                    Name: app-key.crt
                    Labels:
                      foo: bar
                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                    Driver:
                      Name: secret-bucket
                      Options:
                        OptionA: value for driver option A
                        OptionB: value for driver option B
        required: false
      responses:
        201:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        409:
          description: name conflicts with an existing object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /secrets/{id}:
    get:
      tags:
        - Secret
      summary: Inspect a secret
      operationId: SecretInspect
      parameters:
        - name: id
          in: path
          description: ID of the secret
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
              example:
                ID: ktnbjxoalbkvbvedmg1urrz8h
                Version:
                  Index: 11
                CreatedAt: 2016-11-05
                UpdatedAt: 2016-11-05
                Spec:
                  Name: app-dev.crt
                  Labels:
                    foo: bar
                  Driver:
                    Name: secret-bucket
                    Options:
                      OptionA: value for driver option A
                      OptionB: value for driver option B
        404:
          description: secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Secret
      summary: Delete a secret
      operationId: SecretDelete
      parameters:
        - name: id
          in: path
          description: ID of the secret
          required: true
          schema:
            type: string
      responses:
        204:
          description: no error
          content: {}
        404:
          description: secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /secrets/{id}/update:
    post:
      tags:
        - Secret
      summary: Update a Secret
      operationId: SecretUpdate
      parameters:
        - name: id
          in: path
          description: The ID or name of the secret
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version number of the secret object being updated. This is
            required to avoid conflicting writes.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The spec of the secret to update. Currently, only the Labels
          field can be updated. All other fields must remain unchanged from the [SecretInspect
          endpoint](#operation/SecretInspect) response values.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/SecretSpec'
        required: false
      responses:
        200:
          description: no error
          content: {}
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /configs:
    get:
      tags:
        - Config
      summary: List configs
      operationId: ConfigList
      parameters:
        - name: filters
          in: query
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the configs list. Available filters:

            - `id=<config id>`
            - `label=<key> or label=<key>=value`
            - `name=<config name>`
            - `names=<config name>`
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                type: array
                example:
                  - ID: ktnbjxoalbkvbvedmg1urrz8h
                    Version:
                      Index: 11
                    CreatedAt: 2016-11-05
                    UpdatedAt: 2016-11-05
                    Spec:
                      Name: server.conf
                items:
                  $ref: '#/components/schemas/Config'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/create:
    post:
      tags:
        - Config
      summary: Create a config
      operationId: ConfigCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigSpec'
                - type: object
                  example:
                    Name: server.conf
                    Labels:
                      foo: bar
                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
        required: false
      responses:
        201:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        409:
          description: name conflicts with an existing object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /configs/{id}:
    get:
      tags:
        - Config
      summary: Inspect a config
      operationId: ConfigInspect
      parameters:
        - name: id
          in: path
          description: ID of the config
          required: true
          schema:
            type: string
      responses:
        200:
          description: no error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
              example:
                ID: ktnbjxoalbkvbvedmg1urrz8h
                Version:
                  Index: 11
                CreatedAt: 2016-11-05
                UpdatedAt: 2016-11-05
                Spec:
                  Name: app-dev.crt
        404:
          description: config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Config
      summary: Delete a config
      operationId: ConfigDelete
      parameters:
        - name: id
          in: path
          description: ID of the config
          required: true
          schema:
            type: string
      responses:
        204:
          description: no error
          content: {}
        404:
          description: config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/{id}/update:
    post:
      tags:
        - Config
      summary: Update a Config
      operationId: ConfigUpdate
      parameters:
        - name: id
          in: path
          description: The ID or name of the config
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version number of the config object being updated. This is
            required to avoid conflicting writes.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The spec of the config to update. Currently, only the Labels
          field can be updated. All other fields must remain unchanged from the [ConfigInspect
          endpoint](#operation/ConfigInspect) response values.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/ConfigSpec'
        required: false
      responses:
        200:
          description: no error
          content: {}
        400:
          description: bad parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: no such config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: node is not part of a swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /distribution/{name}/json:
    get:
      tags:
        - Distribution
      summary: Get image information from the registry
      description: Return image digest and platform information by contacting the
        registry.
      operationId: DistributionInspect
      parameters:
        - name: name
          in: path
          description: Image name or id
          required: true
          schema:
            type: string
      responses:
        200:
          description: descriptor and platform information
          content:
            application/json:
              schema:
                title: DistributionInspectResponse
                required:
                  - Descriptor
                  - Platforms
                type: object
                properties:
                  Descriptor:
                    type: object
                    properties:
                      MediaType:
                        type: string
                      Size:
                        type: integer
                        format: int64
                      Digest:
                        type: string
                      URLs:
                        type: array
                        items:
                          type: string
                    description: A descriptor struct containing digest, media type,
                      and size
                  Platforms:
                    type: array
                    description: An array containing all platforms supported by the
                      image
                    items:
                      type: object
                      properties:
                        Architecture:
                          type: string
                        OS:
                          type: string
                        OSVersion:
                          type: string
                        OSFeatures:
                          type: array
                          items:
                            type: string
                        Variant:
                          type: string
                        Features:
                          type: array
                          items:
                            type: string
                x-go-name: DistributionInspect
              example:
                Descriptor:
                  MediaType: application/vnd.docker.distribution.manifest.v2+json
                  Digest: sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96
                  Size: 3987495
                  URLs:
                    - ""
                Platforms:
                  - Architecture: amd64
                    OS: linux
                    OSVersion: ""
                    OSFeatures:
                      - ""
                    Variant: ""
                    Features:
                      - ""
        401:
          description: Failed authentication or no image found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No such image: someimage (tag: latest)'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /session:
    post:
      tags:
        - Session
      summary: Initialize interactive session
      description: |
        Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.

        ### Hijacking

        This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.

        For example, the client sends this request to upgrade the connection:

        ```
        POST /session HTTP/1.1
        Upgrade: h2c
        Connection: Upgrade
        ```

        The Docker daemon will respond with a `101 UPGRADED` response follow with the raw stream:

        ```
        HTTP/1.1 101 UPGRADED
        Connection: Upgrade
        Upgrade: h2c
        ```
      operationId: Session
      responses:
        101:
          description: no error, hijacking successful
          content: {}
        400:
          description: bad parameter
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: server error
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Port:
      required:
        - PrivatePort
        - Type
      type: object
      properties:
        IP:
          type: string
          description: Host IP address that the container's port is mapped to
          format: ip-address
        PrivatePort:
          type: integer
          description: Port on the container
          format: uint16
          nullable: false
        PublicPort:
          type: integer
          description: Port exposed on the host
          format: uint16
        Type:
          type: string
          nullable: false
          enum:
            - tcp
            - udp
            - sctp
      description: An open port on a container
      example:
        PrivatePort: 8080
        PublicPort: 80
        Type: tcp
    MountPoint:
      type: object
      properties:
        Type:
          type: string
        Name:
          type: string
        Source:
          type: string
        Destination:
          type: string
        Driver:
          type: string
        Mode:
          type: string
        RW:
          type: boolean
        Propagation:
          type: string
      description: A mount point inside a container
    DeviceMapping:
      type: object
      properties:
        PathOnHost:
          type: string
        PathInContainer:
          type: string
        CgroupPermissions:
          type: string
      description: A device mapping between the host and container
      example:
        PathOnHost: /dev/deviceName
        PathInContainer: /dev/deviceName
        CgroupPermissions: mrw
    DeviceRequest:
      type: object
      properties:
        Driver:
          type: string
          example: nvidia
        Count:
          type: integer
          example: -1
        DeviceIDs:
          type: array
          example:
            - "0"
            - "1"
            - GPU-fef8089b-4820-abfc-e83e-94318197576e
          items:
            type: string
        Capabilities:
          type: array
          description: |
            A list of capabilities; an OR list of AND lists of capabilities.
          example:
            - - gpu
              - nvidia
              - compute
          items:
            type: array
            items:
              type: string
        Options:
          type: object
          additionalProperties:
            type: string
          description: |
            Driver-specific options, specified as a key/value pairs. These options
            are passed directly to the driver.
      description: A request for devices to be sent to device drivers
    ThrottleDevice:
      type: object
      properties:
        Path:
          type: string
          description: Device path
        Rate:
          minimum: 0
          type: integer
          description: Rate
          format: int64
    Mount:
      type: object
      properties:
        Target:
          type: string
          description: Container path.
        Source:
          type: string
          description: Mount source (e.g. a volume name, a host path).
        Type:
          type: string
          description: |
            The mount type. Available types:

            - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
            - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
            - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
            - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
          enum:
            - bind
            - volume
            - tmpfs
            - npipe
        ReadOnly:
          type: boolean
          description: Whether the mount should be read-only.
        Consistency:
          type: string
          description: 'The consistency requirement for the mount: `default`, `consistent`,
            `cached`, or `delegated`.'
        BindOptions:
          type: object
          properties:
            Propagation:
              type: string
              description: A propagation mode with the value `[r]private`, `[r]shared`,
                or `[r]slave`.
              enum:
                - private
                - rprivate
                - shared
                - rshared
                - slave
                - rslave
            NonRecursive:
              type: boolean
              description: Disable recursive bind mount.
              default: false
          description: Optional configuration for the `bind` type.
        VolumeOptions:
          type: object
          properties:
            NoCopy:
              type: boolean
              description: Populate volume with data from the target.
              default: false
            Labels:
              type: object
              additionalProperties:
                type: string
              description: User-defined key/value metadata.
            DriverConfig:
              type: object
              properties:
                Name:
                  type: string
                  description: Name of the driver to use to create the volume.
                Options:
                  type: object
                  additionalProperties:
                    type: string
                  description: key/value map of driver specific options.
              description: Map of driver specific options
          description: Optional configuration for the `volume` type.
        TmpfsOptions:
          type: object
          properties:
            SizeBytes:
              type: integer
              description: The size for the tmpfs mount in bytes.
              format: int64
            Mode:
              type: integer
              description: The permission mode for the tmpfs mount in an integer.
          description: Optional configuration for the `tmpfs` type.
    RestartPolicy:
      type: object
      properties:
        Name:
          type: string
          description: |
            - Empty string means not to restart
            - `always` Always restart
            - `unless-stopped` Restart always except when the user has manually stopped the container
            - `on-failure` Restart only when the container exit code is non-zero
          enum:
            - ""
            - always
            - unless-stopped
            - on-failure
        MaximumRetryCount:
          type: integer
          description: If `on-failure` is used, the number of times to retry before
            giving up
      description: |
        The behavior to apply when the container exits. The default is not to restart.

        An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.
    Resources:
      type: object
      properties:
        CpuShares:
          type: integer
          description: An integer value representing this container's relative CPU
            weight versus other containers.
        Memory:
          type: integer
          description: Memory limit in bytes.
          format: int64
          default: 0
        CgroupParent:
          type: string
          description: Path to `cgroups` under which the container's `cgroup` is created.
            If the path is not absolute, the path is considered to be relative to
            the `cgroups` path of the init process. Cgroups are created if they do
            not already exist.
        BlkioWeight:
          maximum: 1E+3
          minimum: 0
          type: integer
          description: Block IO weight (relative weight).
        BlkioWeightDevice:
          type: array
          description: |
            Block IO weight (relative device weight) in the form `[{"Path": "device_path", "Weight": weight}]`.
          items:
            type: object
            properties:
              Path:
                type: string
              Weight:
                minimum: 0
                type: integer
        BlkioDeviceReadBps:
          type: array
          description: |
            Limit read rate (bytes per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
        BlkioDeviceWriteBps:
          type: array
          description: |
            Limit write rate (bytes per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
        BlkioDeviceReadIOps:
          type: array
          description: |
            Limit read rate (IO per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
        BlkioDeviceWriteIOps:
          type: array
          description: |
            Limit write rate (IO per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
        CpuPeriod:
          type: integer
          description: The length of a CPU period in microseconds.
          format: int64
        CpuQuota:
          type: integer
          description: Microseconds of CPU time that the container can get in a CPU
            period.
          format: int64
        CpuRealtimePeriod:
          type: integer
          description: The length of a CPU real-time period in microseconds. Set to
            0 to allocate no time allocated to real-time tasks.
          format: int64
        CpuRealtimeRuntime:
          type: integer
          description: The length of a CPU real-time runtime in microseconds. Set
            to 0 to allocate no time allocated to real-time tasks.
          format: int64
        CpusetCpus:
          type: string
          description: CPUs in which to allow execution (e.g., `0-3`, `0,1`)
          example: 0-3
        CpusetMems:
          type: string
          description: Memory nodes (MEMs) in which to allow execution (0-3, 0,1).
            Only effective on NUMA systems.
        Devices:
          type: array
          description: A list of devices to add to the container.
          items:
            $ref: '#/components/schemas/DeviceMapping'
        DeviceCgroupRules:
          type: array
          description: a list of cgroup rules to apply to the container
          items:
            type: string
            example: c 13:* rwm
        DeviceRequests:
          type: array
          description: a list of requests for devices to be sent to device drivers
          items:
            $ref: '#/components/schemas/DeviceRequest'
        KernelMemory:
          type: integer
          description: Kernel memory limit in bytes.
          format: int64
          example: 209715200
        KernelMemoryTCP:
          type: integer
          description: Hard limit for kernel TCP buffer memory (in bytes).
          format: int64
        MemoryReservation:
          type: integer
          description: Memory soft limit in bytes.
          format: int64
        MemorySwap:
          type: integer
          description: Total memory limit (memory + swap). Set as `-1` to enable unlimited
            swap.
          format: int64
        MemorySwappiness:
          maximum: 1E+2
          minimum: 0
          type: integer
          description: Tune a container's memory swappiness behavior. Accepts an integer
            between 0 and 100.
          format: int64
        NanoCPUs:
          type: integer
          description: CPU quota in units of 10<sup>-9</sup> CPUs.
          format: int64
        OomKillDisable:
          type: boolean
          description: Disable OOM Killer for the container.
        Init:
          type: boolean
          description: Run an init inside the container that forwards signals and
            reaps processes. This field is omitted if empty, and the default (as configured
            on the daemon) is used.
          nullable: true
        PidsLimit:
          type: integer
          description: |
            Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.
          format: int64
          nullable: true
        Ulimits:
          type: array
          description: |
            A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
          items:
            type: object
            properties:
              Name:
                type: string
                description: Name of ulimit
              Soft:
                type: integer
                description: Soft limit
              Hard:
                type: integer
                description: Hard limit
        CpuCount:
          type: integer
          description: |
            The number of usable CPUs (Windows only).

            On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
          format: int64
        CpuPercent:
          type: integer
          description: |
            The usable percentage of the available CPUs (Windows only).

            On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
          format: int64
        IOMaximumIOps:
          type: integer
          description: Maximum IOps for the container system drive (Windows only)
          format: int64
        IOMaximumBandwidth:
          type: integer
          description: Maximum IO in bytes per second for the container system drive
            (Windows only)
          format: int64
      description: A container's resources (cgroups config, ulimits, etc)
    ResourceObject:
      type: object
      properties:
        NanoCPUs:
          type: integer
          format: int64
          example: 4000000000
        MemoryBytes:
          type: integer
          format: int64
          example: 8272408576
        GenericResources:
          $ref: '#/components/schemas/GenericResources'
      description: An object describing the resources which can be advertised by a
        node and requested by a task
    GenericResources:
      type: array
      description: User-defined resources can be either Integer resources (e.g, `SSD=3`)
        or String resources (e.g, `GPU=UUID1`)
      example:
        - DiscreteResourceSpec:
            Kind: SSD
            Value: 3
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID1
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID2
      items:
        type: object
        properties:
          NamedResourceSpec:
            type: object
            properties:
              Kind:
                type: string
              Value:
                type: string
          DiscreteResourceSpec:
            type: object
            properties:
              Kind:
                type: string
              Value:
                type: integer
                format: int64
    HealthConfig:
      type: object
      properties:
        Test:
          type: array
          description: |
            The test to perform. Possible values are:

            - `[]` inherit healthcheck from image or parent image
            - `["NONE"]` disable healthcheck
            - `["CMD", args...]` exec arguments directly
            - `["CMD-SHELL", command]` run command with system's default shell
          items:
            type: string
        Interval:
          type: integer
          description: The time to wait between checks in nanoseconds. It should be
            0 or at least 1000000 (1 ms). 0 means inherit.
        Timeout:
          type: integer
          description: The time to wait before considering the check to have hung.
            It should be 0 or at least 1000000 (1 ms). 0 means inherit.
        Retries:
          type: integer
          description: The number of consecutive failures needed to consider a container
            as unhealthy. 0 means inherit.
        StartPeriod:
          type: integer
          description: Start period for the container to initialize before starting
            health-retries countdown in nanoseconds. It should be 0 or at least 1000000
            (1 ms). 0 means inherit.
      description: A test to perform to check that the container is healthy.
    Health:
      type: object
      properties:
        Status:
          type: string
          description: |
            Status is one of `none`, `starting`, `healthy` or `unhealthy`

            - "none"      Indicates there is no healthcheck
            - "starting"  Starting indicates that the container is not yet ready
            - "healthy"   Healthy indicates that the container is running correctly
            - "unhealthy" Unhealthy indicates that the container has a problem
          example: healthy
          enum:
            - none
            - starting
            - healthy
            - unhealthy
        FailingStreak:
          type: integer
          description: FailingStreak is the number of consecutive failures
          example: 0
        Log:
          type: array
          description: |
            Log contains the last few results (oldest first)
          items:
            $ref: '#/components/schemas/HealthcheckResult'
      description: |
        Health stores information about the container's healthcheck results.
    HealthcheckResult:
      type: object
      properties:
        Start:
          type: string
          description: |
            Date and time at which this check started in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          format: date-time
          example: 2020-01-04
        End:
          type: string
          description: |
            Date and time at which this check ended in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          format: dateTime
          example: 2020-01-04
        ExitCode:
          type: integer
          description: |
            ExitCode meanings:

            - `0` healthy
            - `1` unhealthy
            - `2` reserved (considered unhealthy)
            - other values: error running probe
          example: 0
        Output:
          type: string
          description: Output from last check
      description: |
        HealthcheckResult stores information about a single run of a healthcheck probe
    HostConfig:
      description: Container configuration that depends on the host we are running
        on
      allOf:
        - $ref: '#/components/schemas/Resources'
        - type: object
          properties:
            Binds:
              type: array
              description: |
                A list of volume bindings for this container. Each volume binding
                is a string in one of these forms:

                - `host-src:container-dest[:options]` to bind-mount a host path
                  into the container. Both `host-src`, and `container-dest` must
                  be an _absolute_ path.
                - `volume-name:container-dest[:options]` to bind-mount a volume
                  managed by a volume driver into the container. `container-dest`
                  must be an _absolute_ path.

                `options` is an optional, comma-delimited list of:

                - `nocopy` disables automatic copying of data from the container
                  path to the volume. The `nocopy` flag only applies to named volumes.
                - `[ro|rw]` mounts a volume read-only or read-write, respectively.
                  If omitted or set to `rw`, volumes are mounted read-write.
                - `[z|Z]` applies SELinux labels to allow or deny multiple containers
                  to read and write to the same volume.
                    - `z`: a _shared_ content label is applied to the content. This
                      label indicates that multiple containers can share the volume
                      content, for both reading and writing.
                    - `Z`: a _private unshared_ label is applied to the content.
                      This label indicates that only the current container can use
                      a private volume. Labeling systems such as SELinux require
                      proper labels to be placed on volume content that is mounted
                      into a container. Without a label, the security system can
                      prevent a container's processes from using the content. By
                      default, the labels set by the host operating system are not
                      modified.
                - `[[r]shared|[r]slave|[r]private]` specifies mount
                  [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
                  This only applies to bind-mounted volumes, not internal volumes
                  or named volumes. Mount propagation requires the source mount
                  point (the location where the source directory is mounted in the
                  host operating system) to have the correct propagation properties.
                  For shared volumes, the source mount point must be set to `shared`.
                  For slave volumes, the mount must be set to either `shared` or
                  `slave`.
              items:
                type: string
            ContainerIDFile:
              type: string
              description: Path to a file where the container ID is written
            LogConfig:
              type: object
              properties:
                Type:
                  type: string
                  enum:
                    - json-file
                    - syslog
                    - journald
                    - gelf
                    - fluentd
                    - awslogs
                    - splunk
                    - etwlogs
                    - none
                Config:
                  type: object
                  additionalProperties:
                    type: string
              description: The logging configuration for this container
            NetworkMode:
              type: string
              description: 'Network mode to use for this container. Supported standard
              values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any
              other value is taken as a custom network''s name to which this container
              should connect to.'
            PortBindings:
              $ref: '#/components/schemas/PortMap'
            RestartPolicy:
              $ref: '#/components/schemas/RestartPolicy'
            AutoRemove:
              type: boolean
              description: Automatically remove the container when the container's process
                exits. This has no effect if `RestartPolicy` is set.
            VolumeDriver:
              type: string
              description: Driver that this container uses to mount volumes.
            VolumesFrom:
              type: array
              description: A list of volumes to inherit from another container, specified
                in the form `<container name>[:<ro|rw>]`.
              items:
                type: string
            Mounts:
              type: array
              description: Specification for mounts to be added to the container.
              items:
                $ref: '#/components/schemas/Mount'
            Capabilities:
              type: array
              description: |
                A list of kernel capabilities to be available for container (this overrides the default set).

                Conflicts with options 'CapAdd' and 'CapDrop'"
              items:
                type: string
            CapAdd:
              type: array
              description: A list of kernel capabilities to add to the container. Conflicts
                with option 'Capabilities'
              items:
                type: string
            CapDrop:
              type: array
              description: A list of kernel capabilities to drop from the container.
                Conflicts with option 'Capabilities'
              items:
                type: string
            Dns:
              type: array
              description: A list of DNS servers for the container to use.
              items:
                type: string
            DnsOptions:
              type: array
              description: A list of DNS options.
              items:
                type: string
            DnsSearch:
              type: array
              description: A list of DNS search domains.
              items:
                type: string
            ExtraHosts:
              type: array
              description: |
                A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `["hostname:IP"]`.
              items:
                type: string
            GroupAdd:
              type: array
              description: A list of additional groups that the container process will
                run as.
              items:
                type: string
            IpcMode:
              type: string
              description: |
                IPC sharing mode for the container. Possible values are:

                - `"none"`: own private IPC namespace, with /dev/shm not mounted
                - `"private"`: own private IPC namespace
                - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
                - `"container:<name|id>"`: join another (shareable) container's IPC namespace
                - `"host"`: use the host system's IPC namespace

                If not specified, daemon default is used, which can either be `"private"`
                or `"shareable"`, depending on daemon version and configuration.
            Cgroup:
              type: string
              description: Cgroup to use for the container.
            Links:
              type: array
              description: A list of links for the container in the form `container_name:alias`.
              items:
                type: string
            OomScoreAdj:
              type: integer
              description: An integer value containing the score given to the container
                in order to tune OOM killer preferences.
              example: 500
            PidMode:
              type: string
              description: |
                Set the PID (Process) Namespace mode for the container. It can be either:

                - `"container:<name|id>"`: joins another container's PID namespace
                - `"host"`: use the host's PID namespace inside the container
            Privileged:
              type: boolean
              description: Gives the container full access to the host.
            PublishAllPorts:
              type: boolean
              description: |
                Allocates an ephemeral host port for all of a container's
                exposed ports.

                Ports are de-allocated when the container stops and allocated when the container starts.
                The allocated port might be changed when restarting the container.

                The port is selected from the ephemeral port range that depends on the kernel.
                For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
            ReadonlyRootfs:
              type: boolean
              description: Mount the container's root filesystem as read only.
            SecurityOpt:
              type: array
              description: A list of string values to customize labels for MLS systems,
                such as SELinux.
              items:
                type: string
            StorageOpt:
              type: object
              additionalProperties:
                type: string
              description: |
                Storage driver options for this container, in the form `{"size": "120G"}`.
            Tmpfs:
              type: object
              additionalProperties:
                type: string
              description: |
                A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ "/run": "rw,noexec,nosuid,size=65536k" }`.
            UTSMode:
              type: string
              description: UTS namespace to use for the container.
            UsernsMode:
              type: string
              description: Sets the usernamespace mode for the container when usernamespace
                remapping option is enabled.
            ShmSize:
              minimum: 0
              type: integer
              description: Size of `/dev/shm` in bytes. If omitted, the system uses
                64MB.
            Sysctls:
              type: object
              additionalProperties:
                type: string
              description: |
                A list of kernel parameters (sysctls) to set in the container. For example: `{"net.ipv4.ip_forward": "1"}`
            Runtime:
              type: string
              description: Runtime to use with this container.
            ConsoleSize:
              maxItems: 2
              minItems: 2
              type: array
              description: Initial console size, as an `[height, width]` array. (Windows
                only)
              items:
                minimum: 0
                type: integer
            Isolation:
              type: string
              description: Isolation technology of the container. (Windows only)
              enum:
                - default
                - process
                - hyperv
            MaskedPaths:
              type: array
              description: The list of paths to be masked inside the container (this
                overrides the default set of paths)
              items:
                type: string
            ReadonlyPaths:
              type: array
              description: The list of paths to be set as read-only inside the container
                (this overrides the default set of paths)
              items:
                type: string
    ContainerConfig:
      type: object
      properties:
        Hostname:
          type: string
          description: The hostname to use for the container, as a valid RFC 1123
            hostname.
        Domainname:
          type: string
          description: The domain name to use for the container.
        User:
          type: string
          description: The user that commands are run as inside the container.
        AttachStdin:
          type: boolean
          description: Whether to attach to `stdin`.
          default: false
        AttachStdout:
          type: boolean
          description: Whether to attach to `stdout`.
          default: true
        AttachStderr:
          type: boolean
          description: Whether to attach to `stderr`.
          default: true
        ExposedPorts:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: |
            An object mapping ports to an empty object in the form:

            `{"<port>/<tcp|udp|sctp>": {}}`
        Tty:
          type: boolean
          description: Attach standard streams to a TTY, including `stdin` if it is
            not closed.
          default: false
        OpenStdin:
          type: boolean
          description: Open `stdin`
          default: false
        StdinOnce:
          type: boolean
          description: Close `stdin` after one attached client disconnects
          default: false
        Env:
          type: array
          description: |
            A list of environment variables to set inside the container in the form `["VAR=value", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
          items:
            type: string
        Cmd:
          type: array
          description: Command to run specified as a string or an array of strings.
          items:
            type: string
        Healthcheck:
          $ref: '#/components/schemas/HealthConfig'
        ArgsEscaped:
          type: boolean
          description: Command is already escaped (Windows only)
        Image:
          type: string
          description: The name of the image to use when creating the container
        Volumes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: An object mapping mount point paths inside the container to
            empty objects.
        WorkingDir:
          type: string
          description: The working directory for commands to run in.
        Entrypoint:
          type: array
          description: |
            The entry point for the container as a string or an array of strings.

            If the array consists of exactly one empty string (`[""]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
          items:
            type: string
        NetworkDisabled:
          type: boolean
          description: Disable networking for the container.
        MacAddress:
          type: string
          description: MAC address of the container.
        OnBuild:
          type: array
          description: '`ONBUILD` metadata that were defined in the image''s `Dockerfile`.'
          items:
            type: string
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        StopSignal:
          type: string
          description: Signal to stop a container as a string or unsigned integer.
          default: SIGTERM
        StopTimeout:
          type: integer
          description: Timeout to stop a container in seconds.
        Shell:
          type: array
          description: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
          items:
            type: string
      description: Configuration for a container that is portable between hosts
    NetworkSettings:
      type: object
      properties:
        Bridge:
          type: string
          description: Name of the network'a bridge (for example, `docker0`).
          example: docker0
        SandboxID:
          type: string
          description: SandboxID uniquely represents a container's network stack.
          example: 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3
        HairpinMode:
          type: boolean
          description: |
            Indicates if hairpin NAT should be enabled on the virtual interface.
          example: false
        LinkLocalIPv6Address:
          type: string
          description: IPv6 unicast address using the link-local prefix.
          example: fe80::42:acff:fe11:1
        LinkLocalIPv6PrefixLen:
          type: integer
          description: Prefix length of the IPv6 unicast address.
          example: 64
        Ports:
          $ref: '#/components/schemas/PortMap'
        SandboxKey:
          type: string
          description: SandboxKey identifies the sandbox
          example: /var/run/docker/netns/8ab54b426c38
        SecondaryIPAddresses:
          type: array
          description: ""
          nullable: true
          items:
            $ref: '#/components/schemas/Address'
        SecondaryIPv6Addresses:
          type: array
          description: ""
          nullable: true
          items:
            $ref: '#/components/schemas/Address'
        EndpointID:
          type: string
          description: |
            EndpointID uniquely represents a service endpoint in a Sandbox.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
        Gateway:
          type: string
          description: |
            Gateway address for the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 172.17.0.1
        GlobalIPv6Address:
          type: string
          description: |
            Global IPv6 address for the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 2001:db8::5689
        GlobalIPv6PrefixLen:
          type: integer
          description: |
            Mask length of the global IPv6 address.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 64
        IPAddress:
          type: string
          description: |
            IPv4 address for the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 172.17.0.4
        IPPrefixLen:
          type: integer
          description: |
            Mask length of the IPv4 address.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 16
        IPv6Gateway:
          type: string
          description: |
            IPv6 gateway address for this network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 2001:db8:2::100
        MacAddress:
          type: string
          description: |
            MAC address for the container on the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 02:42:ac:11:00:04
        Networks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EndpointSettings'
          description: |
            Information about all networks that the container is connected to.
      description: NetworkSettings exposes the network settings in the API
    Address:
      type: object
      properties:
        Addr:
          type: string
          description: IP address.
        PrefixLen:
          type: integer
          description: Mask length of the IP address.
      description: Address represents an IPv4 or IPv6 IP address.
    PortMap:
      type: object
      additionalProperties:
        type: array
        nullable: true
        items:
          $ref: '#/components/schemas/PortBinding'
      description: |
        PortMap describes the mapping of container ports to host ports, using the
        container's port-number and protocol as key in the format `<port>/<protocol>`,
        for example, `80/udp`.

        If a container's port is mapped for multiple protocols, separate entries
        are added to the mapping table.
      example:
        443/tcp:
          - HostIp: 127.0.0.1
            HostPort: "4443"
        80/tcp:
          - HostIp: 0.0.0.0
            HostPort: "80"
          - HostIp: 0.0.0.0
            HostPort: "8080"
        80/udp:
          - HostIp: 0.0.0.0
            HostPort: "80"
        53/udp:
          - HostIp: 0.0.0.0
            HostPort: "53"
    PortBinding:
      type: object
      properties:
        HostIp:
          type: string
          description: Host IP address that the container's port is mapped to.
          example: 127.0.0.1
        HostPort:
          type: string
          description: Host port number that the container's port is mapped to.
          example: "4443"
      description: |
        PortBinding represents a binding between a host IP address and a host
        port.
    GraphDriverData:
      required:
        - Data
        - Name
      type: object
      properties:
        Name:
          type: string
          nullable: false
        Data:
          type: object
          additionalProperties:
            type: string
          nullable: false
      description: Information about a container's graph driver.
    Image:
      required:
        - Architecture
        - Author
        - Comment
        - Container
        - Created
        - DockerVersion
        - GraphDriver
        - Id
        - Os
        - Parent
        - RootFS
        - Size
        - VirtualSize
      type: object
      properties:
        Id:
          type: string
          nullable: false
        RepoTags:
          type: array
          items:
            type: string
        RepoDigests:
          type: array
          items:
            type: string
        Parent:
          type: string
          nullable: false
        Comment:
          type: string
          nullable: false
        Created:
          type: string
          nullable: false
        Container:
          type: string
          nullable: false
        ContainerConfig:
          $ref: '#/components/schemas/ContainerConfig'
        DockerVersion:
          type: string
          nullable: false
        Author:
          type: string
          nullable: false
        Config:
          $ref: '#/components/schemas/ContainerConfig'
        Architecture:
          type: string
          nullable: false
        Os:
          type: string
          nullable: false
        OsVersion:
          type: string
        Size:
          type: integer
          format: int64
          nullable: false
        VirtualSize:
          type: integer
          format: int64
          nullable: false
        GraphDriver:
          $ref: '#/components/schemas/GraphDriverData'
        RootFS:
          required:
            - Type
          type: object
          properties:
            Type:
              type: string
              nullable: false
            Layers:
              type: array
              items:
                type: string
            BaseLayer:
              type: string
        Metadata:
          type: object
          properties:
            LastTagTime:
              type: string
              format: dateTime
    ImageSummary:
      required:
        - Containers
        - Created
        - Id
        - Labels
        - ParentId
        - RepoDigests
        - RepoTags
        - SharedSize
        - Size
        - VirtualSize
      type: object
      properties:
        Id:
          type: string
          nullable: false
        ParentId:
          type: string
          nullable: false
        RepoTags:
          type: array
          nullable: false
          items:
            type: string
        RepoDigests:
          type: array
          nullable: false
          items:
            type: string
        Created:
          type: integer
          nullable: false
        Size:
          type: integer
          nullable: false
        SharedSize:
          type: integer
          nullable: false
        VirtualSize:
          type: integer
          nullable: false
        Labels:
          type: object
          additionalProperties:
            type: string
          nullable: false
        Containers:
          type: integer
          nullable: false
    AuthConfig:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        serveraddress:
          type: string
      example:
        username: hannibal
        password: xxxx
        serveraddress: https://index.docker.io/v1/
    ProcessConfig:
      type: object
      properties:
        privileged:
          type: boolean
        user:
          type: string
        tty:
          type: boolean
        entrypoint:
          type: string
        arguments:
          type: array
          items:
            type: string
    Volume:
      required:
        - Driver
        - Labels
        - Mountpoint
        - Name
        - Options
        - Scope
      type: object
      properties:
        Name:
          type: string
          description: Name of the volume.
          nullable: false
        Driver:
          type: string
          description: Name of the volume driver used by the volume.
          nullable: false
        Mountpoint:
          type: string
          description: Mount path of the volume on the host.
          nullable: false
        CreatedAt:
          type: string
          description: Date/Time the volume was created.
          format: dateTime
        Status:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: |
            Low-level details about the volume, provided by the volume driver.
            Details are returned as a map with key/value pairs:
            `{"key":"value","key2":"value2"}`.

            The `Status` field is optional, and is omitted if the volume driver
            does not support this feature.
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          nullable: false
        Scope:
          type: string
          description: The level at which the volume exists. Either `global` for cluster-wide,
            or `local` for machine level.
          nullable: false
          default: local
          enum:
            - local
            - global
        Options:
          type: object
          additionalProperties:
            type: string
          description: The driver specific options used when creating the volume.
        UsageData:
          required:
            - RefCount
            - Size
          type: object
          properties:
            Size:
              type: integer
              description: |
                Amount of disk space used by the volume (in bytes). This information
                is only available for volumes created with the `"local"` volume
                driver. For volumes created with other volume drivers, this field
                is set to `-1` ("not available")
              nullable: false
            RefCount:
              type: integer
              description: |
                The number of containers referencing this volume. This field
                is set to `-1` if the reference-count is not available.
              nullable: false
          description: |
            Usage details about the volume. This information is used by the
            `GET /system/df` endpoint, and omitted in other endpoints.
          nullable: true
      example:
        Name: tardis
        Driver: custom
        Mountpoint: /var/lib/docker/volumes/tardis
        Status:
          hello: world
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Scope: local
        CreatedAt: 2016-06-07
    Network:
      type: object
      properties:
        Name:
          type: string
        Id:
          type: string
        Created:
          type: string
          format: dateTime
        Scope:
          type: string
        Driver:
          type: string
        EnableIPv6:
          type: boolean
        IPAM:
          $ref: '#/components/schemas/IPAM'
        Internal:
          type: boolean
        Attachable:
          type: boolean
        Ingress:
          type: boolean
        Containers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NetworkContainer'
        Options:
          type: object
          additionalProperties:
            type: string
        Labels:
          type: object
          additionalProperties:
            type: string
      example:
        Name: net01
        Id: 7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99
        Created: 2016-10-19
        Scope: local
        Driver: bridge
        EnableIPv6: false
        IPAM:
          Driver: default
          Config:
            - Subnet: 172.19.0.0/16
              Gateway: 172.19.0.1
          Options:
            foo: bar
        Internal: false
        Attachable: false
        Ingress: false
        Containers:
          19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:
            Name: test
            EndpointID: 628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a
            MacAddress: 02:42:ac:13:00:02
            IPv4Address: 172.19.0.2/16
            IPv6Address: ""
        Options:
          com.docker.network.bridge.default_bridge: "true"
          com.docker.network.bridge.enable_icc: "true"
          com.docker.network.bridge.enable_ip_masquerade: "true"
          com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
          com.docker.network.bridge.name: docker0
          com.docker.network.driver.mtu: "1500"
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
    IPAM:
      type: object
      properties:
        Driver:
          type: string
          description: Name of the IPAM driver to use.
          default: default
        Config:
          type: array
          description: 'List of IPAM configuration options, specified as a map: `{"Subnet":
            <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP
            address>}`'
          items:
            type: object
            additionalProperties:
              type: string
        Options:
          type: object
          additionalProperties:
            type: string
          description: Driver-specific options, specified as a map.
    NetworkContainer:
      type: object
      properties:
        Name:
          type: string
        EndpointID:
          type: string
        MacAddress:
          type: string
        IPv4Address:
          type: string
        IPv6Address:
          type: string
    BuildInfo:
      type: object
      properties:
        id:
          type: string
        stream:
          type: string
        error:
          type: string
        errorDetail:
          $ref: '#/components/schemas/ErrorDetail'
        status:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
        aux:
          $ref: '#/components/schemas/ImageID'
    BuildCache:
      type: object
      properties:
        ID:
          type: string
        Parent:
          type: string
        Type:
          type: string
        Description:
          type: string
        InUse:
          type: boolean
        Shared:
          type: boolean
        Size:
          type: integer
        CreatedAt:
          type: integer
        LastUsedAt:
          type: integer
          nullable: true
        UsageCount:
          type: integer
    ImageID:
      type: object
      properties:
        ID:
          type: string
      description: Image ID or Digest
      example:
        ID: sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c
    CreateImageInfo:
      type: object
      properties:
        id:
          type: string
        error:
          type: string
        status:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
    PushImageInfo:
      type: object
      properties:
        error:
          type: string
        status:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
    ErrorDetail:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ProgressDetail:
      type: object
      properties:
        current:
          type: integer
        total:
          type: integer
    ErrorResponse:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: The error message.
          nullable: false
      description: Represents an error.
      example:
        message: Something went wrong.
    IdResponse:
      required:
        - Id
      type: object
      properties:
        Id:
          type: string
          description: The id of the newly created object.
          nullable: false
      description: Response to an API call that returns just an Id
    EndpointSettings:
      type: object
      properties:
        IPAMConfig:
          $ref: '#/components/schemas/EndpointIPAMConfig'
        Links:
          type: array
          example:
            - container_1
            - container_2
          items:
            type: string
        Aliases:
          type: array
          example:
            - server_x
            - server_y
          items:
            type: string
        NetworkID:
          type: string
          description: |
            Unique ID of the network.
          example: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
        EndpointID:
          type: string
          description: |
            Unique ID for the service endpoint in a Sandbox.
          example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
        Gateway:
          type: string
          description: |
            Gateway address for this network.
          example: 172.17.0.1
        IPAddress:
          type: string
          description: |
            IPv4 address.
          example: 172.17.0.4
        IPPrefixLen:
          type: integer
          description: |
            Mask length of the IPv4 address.
          example: 16
        IPv6Gateway:
          type: string
          description: |
            IPv6 gateway address.
          example: 2001:db8:2::100
        GlobalIPv6Address:
          type: string
          description: |
            Global IPv6 address.
          example: 2001:db8::5689
        GlobalIPv6PrefixLen:
          type: integer
          description: |
            Mask length of the global IPv6 address.
          format: int64
          example: 64
        MacAddress:
          type: string
          description: |
            MAC address for the endpoint on this network.
          example: 02:42:ac:11:00:04
        DriverOpts:
          type: object
          additionalProperties:
            type: string
          description: |
            DriverOpts is a mapping of driver options and values. These options
            are passed directly to the driver and are driver specific.
          nullable: true
          example:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
      description: Configuration for a network endpoint.
    EndpointIPAMConfig:
      type: object
      properties:
        IPv4Address:
          type: string
          example: 172.20.30.33
        IPv6Address:
          type: string
          example: 2001:db8:abcd::3033
        LinkLocalIPs:
          type: array
          example:
            - 169.254.34.68
            - fe80::3468
          items:
            type: string
      description: |
        EndpointIPAMConfig represents an endpoint's IPAM configuration.
      nullable: true
      x-nullable: true
    PluginMount:
      required:
        - Description
        - Destination
        - Name
        - Options
        - Settable
        - Source
        - Type
      type: object
      properties:
        Name:
          type: string
          nullable: false
          example: some-mount
        Description:
          type: string
          nullable: false
          example: This is a mount that's used by the plugin.
        Settable:
          type: array
          items:
            type: string
        Source:
          type: string
          example: /var/lib/docker/plugins/
        Destination:
          type: string
          nullable: false
          example: /mnt/state
        Type:
          type: string
          nullable: false
          example: bind
        Options:
          type: array
          example:
            - rbind
            - rw
          items:
            type: string
      nullable: false
      x-nullable: false
    PluginDevice:
      required:
        - Description
        - Name
        - Path
        - Settable
      type: object
      properties:
        Name:
          type: string
          nullable: false
        Description:
          type: string
          nullable: false
        Settable:
          type: array
          items:
            type: string
        Path:
          type: string
          example: /dev/fuse
      nullable: false
      x-nullable: false
    PluginEnv:
      required:
        - Description
        - Name
        - Settable
        - Value
      type: object
      properties:
        Name:
          type: string
          nullable: false
        Description:
          type: string
          nullable: false
        Settable:
          type: array
          items:
            type: string
        Value:
          type: string
      nullable: false
      x-nullable: false
    PluginInterfaceType:
      required:
        - Capability
        - Prefix
        - Version
      type: object
      properties:
        Prefix:
          type: string
          nullable: false
        Capability:
          type: string
          nullable: false
        Version:
          type: string
          nullable: false
      nullable: false
      x-nullable: false
    Plugin:
      required:
        - Config
        - Enabled
        - Name
        - Settings
      type: object
      properties:
        Id:
          type: string
          example: 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
        Name:
          type: string
          nullable: false
          example: tiborvass/sample-volume-plugin
        Enabled:
          type: boolean
          description: True if the plugin is running. False if the plugin is not running,
            only installed.
          nullable: false
          example: true
        Settings:
          required:
            - Args
            - Devices
            - Env
            - Mounts
          type: object
          properties:
            Mounts:
              type: array
              items:
                $ref: '#/components/schemas/PluginMount'
            Env:
              type: array
              example:
                - DEBUG=0
              items:
                type: string
            Args:
              type: array
              items:
                type: string
            Devices:
              type: array
              items:
                $ref: '#/components/schemas/PluginDevice'
          description: Settings that can be modified by users.
          nullable: false
        PluginReference:
          type: string
          description: plugin remote reference used to push/pull the plugin
          nullable: false
          example: localhost:5000/tiborvass/sample-volume-plugin:latest
        Config:
          required:
            - Args
            - Description
            - Documentation
            - Entrypoint
            - Env
            - Interface
            - IpcHost
            - Linux
            - Mounts
            - Network
            - PidHost
            - PropagatedMount
            - WorkDir
          type: object
          properties:
            DockerVersion:
              type: string
              description: Docker Version used to create the plugin
              nullable: false
              example: 17.06.0-ce
            Description:
              type: string
              nullable: false
              example: A sample volume plugin for Docker
            Documentation:
              type: string
              nullable: false
              example: https://docs.docker.com/engine/extend/plugins/
            Interface:
              required:
                - Socket
                - Types
              type: object
              properties:
                Types:
                  type: array
                  example:
                    - docker.volumedriver/1.0
                  items:
                    $ref: '#/components/schemas/PluginInterfaceType'
                Socket:
                  type: string
                  nullable: false
                  example: plugins.sock
                ProtocolScheme:
                  type: string
                  description: Protocol to use for clients connecting to the plugin.
                  example: some.protocol/v1.0
                  enum:
                    - ""
                    - moby.plugins.http/v1
              description: The interface between Docker and the plugin
              nullable: false
            Entrypoint:
              type: array
              example:
                - /usr/bin/sample-volume-plugin
                - /data
              items:
                type: string
            WorkDir:
              type: string
              nullable: false
              example: /bin/
            User:
              type: object
              properties:
                UID:
                  type: integer
                  format: uint32
                  example: 1000
                GID:
                  type: integer
                  format: uint32
                  example: 1000
              nullable: false
            Network:
              required:
                - Type
              type: object
              properties:
                Type:
                  type: string
                  nullable: false
                  example: host
              nullable: false
            Linux:
              required:
                - AllowAllDevices
                - Capabilities
                - Devices
              type: object
              properties:
                Capabilities:
                  type: array
                  example:
                    - CAP_SYS_ADMIN
                    - CAP_SYSLOG
                  items:
                    type: string
                AllowAllDevices:
                  type: boolean
                  nullable: false
                  example: false
                Devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/PluginDevice'
              nullable: false
            PropagatedMount:
              type: string
              nullable: false
              example: /mnt/volumes
            IpcHost:
              type: boolean
              nullable: false
              example: false
            PidHost:
              type: boolean
              nullable: false
              example: false
            Mounts:
              type: array
              items:
                $ref: '#/components/schemas/PluginMount'
            Env:
              type: array
              example:
                - Name: DEBUG
                  Description: If set, prints debug messages
                  Value: "0"
              items:
                $ref: '#/components/schemas/PluginEnv'
            Args:
              required:
                - Description
                - Name
                - Settable
                - Value
              type: object
              properties:
                Name:
                  type: string
                  nullable: false
                  example: args
                Description:
                  type: string
                  nullable: false
                  example: command line arguments
                Settable:
                  type: array
                  items:
                    type: string
                Value:
                  type: array
                  items:
                    type: string
              nullable: false
            rootfs:
              type: object
              properties:
                type:
                  type: string
                  example: layers
                diff_ids:
                  type: array
                  example:
                    - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887
                    - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
                  items:
                    type: string
          description: The config of a plugin.
          nullable: false
      description: A plugin for the Engine API
    ObjectVersion:
      type: object
      properties:
        Index:
          type: integer
          format: uint64
          example: 373531
      description: |
        The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.
        The client must send the version number along with the modified specification when updating these objects.
        This approach ensures safe concurrency and determinism in that the change on the object
        may not be applied if the version number has changed from the last read. In other words,
        if two update requests specify the same base version, only one of the requests can succeed.
        As a result, two separate update requests that happen at the same time will not
        unintentionally overwrite each other.
    NodeSpec:
      type: object
      properties:
        Name:
          type: string
          description: Name for the node.
          example: my-node
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        Role:
          type: string
          description: Role of the node.
          example: manager
          enum:
            - worker
            - manager
        Availability:
          type: string
          description: Availability of the node.
          example: active
          enum:
            - active
            - pause
            - drain
      example:
        Availability: active
        Name: node-name
        Role: manager
        Labels:
          foo: bar
    Node:
      type: object
      properties:
        ID:
          type: string
          example: 24ifsmvkjbyhk
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          type: string
          description: |
            Date and time at which the node was added to the swarm in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          format: dateTime
          example: 2016-08-18
        UpdatedAt:
          type: string
          description: |
            Date and time at which the node was last updated in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          format: dateTime
          example: 2017-08-09
        Spec:
          $ref: '#/components/schemas/NodeSpec'
        Description:
          $ref: '#/components/schemas/NodeDescription'
        Status:
          $ref: '#/components/schemas/NodeStatus'
        ManagerStatus:
          $ref: '#/components/schemas/ManagerStatus'
    NodeDescription:
      type: object
      properties:
        Hostname:
          type: string
          example: bf3067039e47
        Platform:
          $ref: '#/components/schemas/Platform'
        Resources:
          $ref: '#/components/schemas/ResourceObject'
        Engine:
          $ref: '#/components/schemas/EngineDescription'
        TLSInfo:
          $ref: '#/components/schemas/TLSInfo'
      description: |
        NodeDescription encapsulates the properties of the Node as reported by the
        agent.
    Platform:
      type: object
      properties:
        Architecture:
          type: string
          description: |
            Architecture represents the hardware architecture (for example,
            `x86_64`).
          example: x86_64
        OS:
          type: string
          description: |
            OS represents the Operating System (for example, `linux` or `windows`).
          example: linux
      description: |
        Platform represents the platform (Arch/OS).
    EngineDescription:
      type: object
      properties:
        EngineVersion:
          type: string
          example: 17.06.0
        Labels:
          type: object
          additionalProperties:
            type: string
          example:
            foo: bar
        Plugins:
          type: array
          example:
            - Type: Log
              Name: awslogs
            - Type: Log
              Name: fluentd
            - Type: Log
              Name: gcplogs
            - Type: Log
              Name: gelf
            - Type: Log
              Name: journald
            - Type: Log
              Name: json-file
            - Type: Log
              Name: logentries
            - Type: Log
              Name: splunk
            - Type: Log
              Name: syslog
            - Type: Network
              Name: bridge
            - Type: Network
              Name: host
            - Type: Network
              Name: ipvlan
            - Type: Network
              Name: macvlan
            - Type: Network
              Name: null
            - Type: Network
              Name: overlay
            - Type: Volume
              Name: local
            - Type: Volume
              Name: localhost:5000/vieux/sshfs:latest
            - Type: Volume
              Name: vieux/sshfs:latest
          items:
            type: object
            properties:
              Type:
                type: string
              Name:
                type: string
      description: EngineDescription provides information about an engine.
    TLSInfo:
      type: object
      properties:
        TrustRoot:
          type: string
          description: The root CA certificate(s) that are used to validate leaf TLS
            certificates
        CertIssuerSubject:
          type: string
          description: The base64-url-safe-encoded raw subject bytes of the issuer
        CertIssuerPublicKey:
          type: string
          description: The base64-url-safe-encoded raw public key bytes of the issuer
      description: Information about the issuer of leaf TLS certificates and the trusted
        root CA certificate
      example:
        TrustRoot: |
          -----BEGIN CERTIFICATE-----
          MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
          EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
          MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
          A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
          3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
          Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
          PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
          pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
          -----END CERTIFICATE-----
        CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
        CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
    NodeStatus:
      type: object
      properties:
        State:
          $ref: '#/components/schemas/NodeState'
        Message:
          type: string
          example: ""
        Addr:
          type: string
          description: IP address of the node.
          example: 172.17.0.2
      description: |
        NodeStatus represents the status of a node.

        It provides the current status of the node, as seen by the manager.
    NodeState:
      type: string
      description: NodeState represents the state of a node.
      example: ready
      enum:
        - unknown
        - down
        - ready
        - disconnected
    ManagerStatus:
      type: object
      properties:
        Leader:
          type: boolean
          example: true
          default: false
        Reachability:
          $ref: '#/components/schemas/Reachability'
        Addr:
          type: string
          description: |
            The IP address and port at which the manager is reachable.
          example: 10.0.0.46:2377
      description: |
        ManagerStatus represents the status of a manager.

        It provides the current status of a node's manager component, if the node
        is a manager.
      nullable: true
      x-nullable: true
    Reachability:
      type: string
      description: Reachability represents the reachability of a node.
      example: reachable
      enum:
        - unknown
        - unreachable
        - reachable
    SwarmSpec:
      type: object
      properties:
        Name:
          type: string
          description: Name of the swarm.
          example: default
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          example:
            com.example.corp.type: production
            com.example.corp.department: engineering
        Orchestration:
          type: object
          properties:
            TaskHistoryRetentionLimit:
              type: integer
              description: The number of historic tasks to keep per instance or node.
                If negative, never remove completed or failed tasks.
              format: int64
              example: 10
          description: Orchestration configuration.
          nullable: true
        Raft:
          type: object
          properties:
            SnapshotInterval:
              type: integer
              description: The number of log entries between snapshots.
              format: uint64
              example: 10000
            KeepOldSnapshots:
              type: integer
              description: The number of snapshots to keep beyond the current snapshot.
              format: uint64
            LogEntriesForSlowFollowers:
              type: integer
              description: The number of log entries to keep around to sync up slow
                followers after a snapshot is created.
              format: uint64
              example: 500
            ElectionTick:
              type: integer
              description: |
                The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.

                A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
              example: 3
            HeartbeatTick:
              type: integer
              description: |
                The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.

                A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
              example: 1
          description: Raft configuration.
        Dispatcher:
          type: object
          properties:
            HeartbeatPeriod:
              type: integer
              description: The delay for an agent to send a heartbeat to the dispatcher.
              format: int64
              example: 5000000000
          description: Dispatcher configuration.
          nullable: true
        CAConfig:
          type: object
          properties:
            NodeCertExpiry:
              type: integer
              description: The duration node certificates are issued for.
              format: int64
              example: 7776000000000000
            ExternalCAs:
              type: array
              description: Configuration for forwarding signing requests to an external
                certificate authority.
              items:
                type: object
                properties:
                  Protocol:
                    type: string
                    description: Protocol for communication with the external CA (currently
                      only `cfssl` is supported).
                    default: cfssl
                    enum:
                      - cfssl
                  URL:
                    type: string
                    description: URL where certificate signing requests should be
                      sent.
                  Options:
                    type: object
                    additionalProperties:
                      type: string
                    description: An object with key/value pairs that are interpreted
                      as protocol-specific options for the external CA driver.
                  CACert:
                    type: string
                    description: The root CA certificate (in PEM format) this external
                      CA uses to issue TLS certificates (assumed to be to the current
                      swarm root CA certificate if not provided).
            SigningCACert:
              type: string
              description: The desired signing CA certificate for all swarm node TLS
                leaf certificates, in PEM format.
            SigningCAKey:
              type: string
              description: The desired signing CA key for all swarm node TLS leaf
                certificates, in PEM format.
            ForceRotate:
              type: integer
              description: An integer whose purpose is to force swarm to generate
                a new signing CA certificate and key, if none have been specified
                in `SigningCACert` and `SigningCAKey`
              format: uint64
          description: CA configuration.
          nullable: true
        EncryptionConfig:
          type: object
          properties:
            AutoLockManagers:
              type: boolean
              description: If set, generate a key and use it to lock data stored on
                the managers.
              example: false
          description: Parameters related to encryption-at-rest.
        TaskDefaults:
          type: object
          properties:
            LogDriver:
              type: object
              properties:
                Name:
                  type: string
                  description: |
                    The log driver to use as a default for new tasks.
                  example: json-file
                Options:
                  type: object
                  additionalProperties:
                    type: string
                  description: |
                    Driver-specific options for the selectd log driver, specified
                    as key/value pairs.
                  example:
                    max-file: "10"
                    max-size: 100m
              description: |
                The log driver to use for tasks created in the orchestrator if
                unspecified by a service.

                Updating this value only affects new tasks. Existing tasks continue
                to use their previously configured log driver until recreated.
          description: Defaults for creating tasks in this cluster.
      description: User modifiable swarm configuration.
    ClusterInfo:
      type: object
      properties:
        ID:
          type: string
          description: The ID of the swarm.
          example: abajmipo7b4xz5ip2nrla6b11
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          type: string
          description: |
            Date and time at which the swarm was initialised in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          format: dateTime
          example: 2016-08-18
        UpdatedAt:
          type: string
          description: |
            Date and time at which the swarm was last updated in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          format: dateTime
          example: 2017-08-09
        Spec:
          $ref: '#/components/schemas/SwarmSpec'
        TLSInfo:
          $ref: '#/components/schemas/TLSInfo'
        RootRotationInProgress:
          type: boolean
          description: Whether there is currently a root CA rotation in progress for
            the swarm
          example: false
        DataPathPort:
          type: integer
          description: |
            DataPathPort specifies the data path port number for data traffic.
            Acceptable port range is 1024 to 49151.
            If no port is set or is set to 0, the default port (4789) is used.
          format: uint32
          example: 4789
        DefaultAddrPool:
          type: array
          description: |
            Default Address Pool specifies default subnet pools for global scope networks.
          items:
            type: string
            format: CIDR
            example: ""
        SubnetSize:
          maximum: 29
          type: integer
          description: |
            SubnetSize specifies the subnet size of the networks created from the default subnet pool
          format: uint32
          example: 24
      description: |
        ClusterInfo represents information about the swarm as is returned by the
        "/info" endpoint. Join-tokens are not included.
      nullable: true
      x-nullable: true
    JoinTokens:
      type: object
      properties:
        Worker:
          type: string
          description: |
            The token workers can use to join the swarm.
          example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx
        Manager:
          type: string
          description: |
            The token managers can use to join the swarm.
          example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
      description: |
        JoinTokens contains the tokens workers and managers need to join the swarm.
    Swarm:
      allOf:
        - $ref: '#/components/schemas/ClusterInfo'
        - type: object
          properties:
            JoinTokens:
              $ref: '#/components/schemas/JoinTokens'
    TaskSpec:
      type: object
      properties:
        PluginSpec:
          type: object
          properties:
            Name:
              type: string
              description: The name or 'alias' to use for the plugin.
            Remote:
              type: string
              description: The plugin image reference to use.
            Disabled:
              type: boolean
              description: Disable the plugin once scheduled.
            PluginPrivilege:
              type: array
              items:
                type: object
                properties:
                  Name:
                    type: string
                  Description:
                    type: string
                  Value:
                    type: array
                    items:
                      type: string
                description: Describes a permission accepted by the user upon installing
                  the plugin.
          description: |
            Plugin spec for the service.  *(Experimental release only.)*

            <p><br /></p>

            > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            > mutually exclusive. PluginSpec is only used when the Runtime field
            > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            > field is set to `attachment`.
        ContainerSpec:
          type: object
          properties:
            Image:
              type: string
              description: The image name to use for the container
            Labels:
              type: object
              additionalProperties:
                type: string
              description: User-defined key/value data.
            Command:
              type: array
              description: The command to be run in the image.
              items:
                type: string
            Args:
              type: array
              description: Arguments to the command.
              items:
                type: string
            Hostname:
              type: string
              description: The hostname to use for the container, as a valid RFC 1123
                hostname.
            Env:
              type: array
              description: A list of environment variables in the form `VAR=value`.
              items:
                type: string
            Dir:
              type: string
              description: The working directory for commands to run in.
            User:
              type: string
              description: The user inside the container.
            Groups:
              type: array
              description: A list of additional groups that the container process
                will run as.
              items:
                type: string
            Privileges:
              type: object
              properties:
                CredentialSpec:
                  type: object
                  properties:
                    Config:
                      type: string
                      description: |
                        Load credential spec from a Swarm Config with the given ID.
                        The specified config must also be present in the Configs field with the Runtime property set.

                        <p><br /></p>


                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, and `CredentialSpec.Config` are mutually exclusive.
                      example: 0bt9dmxjvjiqermk6xrop3ekq
                    File:
                      type: string
                      description: |
                        Load credential spec from this file. The file is read by the daemon, and must be present in the
                        `CredentialSpecs` subdirectory in the docker data directory, which defaults to
                        `C:\ProgramData\Docker\` on Windows.

                        For example, specifying `spec.json` loads `C:\ProgramData\Docker\CredentialSpecs\spec.json`.

                        <p><br /></p>

                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, and `CredentialSpec.Config` are mutually exclusive.
                      example: spec.json
                    Registry:
                      type: string
                      description: |
                        Load credential spec from this value in the Windows registry. The specified registry value must be
                        located in:

                        `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`

                        <p><br /></p>


                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, and `CredentialSpec.Config` are mutually exclusive.
                  description: CredentialSpec for managed service account (Windows
                    only)
                SELinuxContext:
                  type: object
                  properties:
                    Disable:
                      type: boolean
                      description: Disable SELinux
                    User:
                      type: string
                      description: SELinux user label
                    Role:
                      type: string
                      description: SELinux role label
                    Type:
                      type: string
                      description: SELinux type label
                    Level:
                      type: string
                      description: SELinux level label
                  description: SELinux labels of the container
              description: Security options for the container
            TTY:
              type: boolean
              description: Whether a pseudo-TTY should be allocated.
            OpenStdin:
              type: boolean
              description: Open `stdin`
            ReadOnly:
              type: boolean
              description: Mount the container's root filesystem as read only.
            Mounts:
              type: array
              description: Specification for mounts to be added to containers created
                as part of the service.
              items:
                $ref: '#/components/schemas/Mount'
            StopSignal:
              type: string
              description: Signal to stop the container.
            StopGracePeriod:
              type: integer
              description: Amount of time to wait for the container to terminate before
                forcefully killing it.
              format: int64
            HealthCheck:
              $ref: '#/components/schemas/HealthConfig'
            Hosts:
              type: array
              description: |
                A list of hostname/IP mappings to add to the container's `hosts`
                file. The format of extra hosts is specified in the
                [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
                man page:

                    IP_address canonical_hostname [aliases...]
              items:
                type: string
            DNSConfig:
              type: object
              properties:
                Nameservers:
                  type: array
                  description: The IP addresses of the name servers.
                  items:
                    type: string
                Search:
                  type: array
                  description: A search list for host-name lookup.
                  items:
                    type: string
                Options:
                  type: array
                  description: A list of internal resolver variables to be modified
                    (e.g., `debug`, `ndots:3`, etc.).
                  items:
                    type: string
              description: Specification for DNS related configurations in resolver
                configuration file (`resolv.conf`).
            Secrets:
              type: array
              description: Secrets contains references to zero or more secrets that
                will be exposed to the service.
              items:
                type: object
                properties:
                  File:
                    type: object
                    properties:
                      Name:
                        type: string
                        description: Name represents the final filename in the filesystem.
                      UID:
                        type: string
                        description: UID represents the file UID.
                      GID:
                        type: string
                        description: GID represents the file GID.
                      Mode:
                        type: integer
                        description: Mode represents the FileMode of the file.
                        format: uint32
                    description: File represents a specific target that is backed
                      by a file.
                  SecretID:
                    type: string
                    description: SecretID represents the ID of the specific secret
                      that we're referencing.
                  SecretName:
                    type: string
                    description: |
                      SecretName is the name of the secret that this references, but this is just provided for
                      lookup/display purposes. The secret in the reference will be identified by its ID.
            Configs:
              type: array
              description: Configs contains references to zero or more configs that
                will be exposed to the service.
              items:
                type: object
                properties:
                  File:
                    type: object
                    properties:
                      Name:
                        type: string
                        description: Name represents the final filename in the filesystem.
                      UID:
                        type: string
                        description: UID represents the file UID.
                      GID:
                        type: string
                        description: GID represents the file GID.
                      Mode:
                        type: integer
                        description: Mode represents the FileMode of the file.
                        format: uint32
                    description: |
                      File represents a specific target that is backed by a file.

                      <p><br /><p>

                      > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
                  Runtime:
                    type: object
                    properties: {}
                    description: |
                      Runtime represents a target that is not mounted into the container but is used by the task

                      <p><br /><p>

                      > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
                  ConfigID:
                    type: string
                    description: ConfigID represents the ID of the specific config
                      that we're referencing.
                  ConfigName:
                    type: string
                    description: |
                      ConfigName is the name of the config that this references, but this is just provided for
                      lookup/display purposes. The config in the reference will be identified by its ID.
            Isolation:
              type: string
              description: Isolation technology of the containers running the service.
                (Windows only)
              enum:
                - default
                - process
                - hyperv
            Init:
              type: boolean
              description: Run an init inside the container that forwards signals
                and reaps processes. This field is omitted if empty, and the default
                (as configured on the daemon) is used.
              nullable: true
            Sysctls:
              type: object
              additionalProperties:
                type: string
              description: |
                Set kernel namedspaced parameters (sysctls) in the container.
                The Sysctls option on services accepts the same sysctls as the
                are supported on containers. Note that while the same sysctls are
                supported, no guarantees or checks are made about their
                suitability for a clustered environment, and it's up to the user
                to determine whether a given sysctl will work properly in a
                Service.
          description: |
            Container spec for the service.

            <p><br /></p>

            > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            > mutually exclusive. PluginSpec is only used when the Runtime field
            > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            > field is set to `attachment`.
        NetworkAttachmentSpec:
          type: object
          properties:
            ContainerID:
              type: string
              description: ID of the container represented by this task
          description: |
            Read-only spec type for non-swarm containers attached to swarm overlay
            networks.

            <p><br /></p>

            > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            > mutually exclusive. PluginSpec is only used when the Runtime field
            > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            > field is set to `attachment`.
        Resources:
          type: object
          properties:
            Limits:
              $ref: '#/components/schemas/ResourceObject'
            Reservation:
              $ref: '#/components/schemas/ResourceObject'
          description: Resource requirements which apply to each individual container
            created as part of the service.
        RestartPolicy:
          type: object
          properties:
            Condition:
              type: string
              description: Condition for restart.
              enum:
                - none
                - on-failure
                - any
            Delay:
              type: integer
              description: Delay between restart attempts.
              format: int64
            MaxAttempts:
              type: integer
              description: Maximum attempts to restart a given container before giving
                up (default value is 0, which is ignored).
              format: int64
              default: 0
            Window:
              type: integer
              description: Windows is the time window used to evaluate the restart
                policy (default value is 0, which is unbounded).
              format: int64
              default: 0
          description: Specification for the restart policy which applies to containers
            created as part of this service.
        Placement:
          type: object
          properties:
            Constraints:
              type: array
              description: |
                An array of constraint expressions to limit the set of nodes where
                a task can be scheduled. Constraint expressions can either use a
                _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find
                nodes that satisfy every expression (AND match). Constraints can
                match node or Docker Engine labels as follows:

                node attribute       | matches                        | example
                ---------------------|--------------------------------|-----------------------------------------------
                `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`
                `node.hostname`      | Node hostname                  | `node.hostname!=node-2`
                `node.role`          | Node role (`manager`/`worker`) | `node.role==manager`
                `node.platform.os`   | Node operating system          | `node.platform.os==windows`
                `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`
                `node.labels`        | User-defined node labels       | `node.labels.security==high`
                `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`

                `engine.labels` apply to Docker Engine labels like operating system,
                drivers, etc. Swarm administrators add `node.labels` for operational
                purposes by using the [`node update endpoint`](#operation/NodeUpdate).
              example:
                - node.hostname!=node3.corp.example.com
                - node.role!=manager
                - node.labels.type==production
                - node.platform.os==linux
                - node.platform.arch==x86_64
              items:
                type: string
            Preferences:
              type: array
              description: Preferences provide a way to make the scheduler aware of
                factors such as topology. They are provided in order from highest
                to lowest precedence.
              example:
                - Spread:
                    SpreadDescriptor: node.labels.datacenter
                - Spread:
                    SpreadDescriptor: node.labels.rack
              items:
                type: object
                properties:
                  Spread:
                    type: object
                    properties:
                      SpreadDescriptor:
                        type: string
                        description: label descriptor, such as engine.labels.az
            MaxReplicas:
              type: integer
              description: Maximum number of replicas for per node (default value
                is 0, which is unlimited)
              format: int64
              default: 0
            Platforms:
              type: array
              description: |
                Platforms stores all the platforms that the service's image can
                run on. This field is used in the platform filter for scheduling.
                If empty, then the platform filter is off, meaning there are no
                scheduling restrictions.
              items:
                $ref: '#/components/schemas/Platform'
        ForceUpdate:
          type: integer
          description: A counter that triggers an update even if no relevant parameters
            have been changed.
        Runtime:
          type: string
          description: Runtime is the type of runtime specified for the task executor.
        Networks:
          type: array
          description: Specifies which networks the service should attach to.
          items:
            $ref: '#/components/schemas/NetworkAttachmentConfig'
        LogDriver:
          type: object
          properties:
            Name:
              type: string
            Options:
              type: object
              additionalProperties:
                type: string
          description: Specifies the log driver to use for tasks created from this
            spec. If not present, the default one for the swarm will be used, finally
            falling back to the engine default if not specified.
      description: User modifiable task configuration.
    TaskState:
      type: string
      enum:
        - new
        - allocated
        - pending
        - assigned
        - accepted
        - preparing
        - ready
        - starting
        - running
        - complete
        - shutdown
        - failed
        - rejected
        - remove
        - orphaned
    Task:
      type: object
      properties:
        ID:
          type: string
          description: The ID of the task.
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          type: string
          format: dateTime
        UpdatedAt:
          type: string
          format: dateTime
        Name:
          type: string
          description: Name of the task.
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        Spec:
          $ref: '#/components/schemas/TaskSpec'
        ServiceID:
          type: string
          description: The ID of the service this task is part of.
        Slot:
          type: integer
        NodeID:
          type: string
          description: The ID of the node that this task is on.
        AssignedGenericResources:
          $ref: '#/components/schemas/GenericResources'
        Status:
          type: object
          properties:
            Timestamp:
              type: string
              format: dateTime
            State:
              $ref: '#/components/schemas/TaskState'
            Message:
              type: string
            Err:
              type: string
            ContainerStatus:
              type: object
              properties:
                ContainerID:
                  type: string
                PID:
                  type: integer
                ExitCode:
                  type: integer
        DesiredState:
          $ref: '#/components/schemas/TaskState'
      example:
        ID: 0kzzo1i0y4jz6027t0k7aezc7
        Version:
          Index: 71
        CreatedAt: 2016-06-07
        UpdatedAt: 2016-06-07
        Spec:
          ContainerSpec:
            Image: redis
          Resources:
            Limits: {}
            Reservations: {}
          RestartPolicy:
            Condition: any
            MaxAttempts: 0
          Placement: {}
        ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
        Slot: 1
        NodeID: 60gvrl6tm78dmak4yl7srz94v
        Status:
          Timestamp: 2016-06-07
          State: running
          Message: started
          ContainerStatus:
            ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
            PID: 677
        DesiredState: running
        NetworksAttachments:
          - Network:
              ID: 4qvuz4ko70xaltuqbt8956gd1
              Version:
                Index: 18
              CreatedAt: 2016-06-07
              UpdatedAt: 2016-06-07
              Spec:
                Name: ingress
                Labels:
                  com.docker.swarm.internal: "true"
                DriverConfiguration: {}
                IPAMOptions:
                  Driver: {}
                  Configs:
                    - Subnet: 10.255.0.0/16
                      Gateway: 10.255.0.1
              DriverState:
                Name: overlay
                Options:
                  com.docker.network.driver.overlay.vxlanid_list: "256"
              IPAMOptions:
                Driver:
                  Name: default
                Configs:
                  - Subnet: 10.255.0.0/16
                    Gateway: 10.255.0.1
            Addresses:
              - 10.255.0.10/16
        AssignedGenericResources:
          - DiscreteResourceSpec:
              Kind: SSD
              Value: 3
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID1
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID2
    ServiceSpec:
      type: object
      properties:
        Name:
          type: string
          description: Name of the service.
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        TaskTemplate:
          $ref: '#/components/schemas/TaskSpec'
        Mode:
          type: object
          properties:
            Replicated:
              type: object
              properties:
                Replicas:
                  type: integer
                  format: int64
            Global:
              type: object
              properties: {}
          description: Scheduling mode for the service.
        UpdateConfig:
          type: object
          properties:
            Parallelism:
              type: integer
              description: Maximum number of tasks to be updated in one iteration
                (0 means unlimited parallelism).
              format: int64
            Delay:
              type: integer
              description: Amount of time between updates, in nanoseconds.
              format: int64
            FailureAction:
              type: string
              description: Action to take if an updated task fails to run, or stops
                running during the update.
              enum:
                - continue
                - pause
                - rollback
            Monitor:
              type: integer
              description: Amount of time to monitor each updated task for failures,
                in nanoseconds.
              format: int64
            MaxFailureRatio:
              type: number
              description: The fraction of tasks that may fail during an update before
                the failure action is invoked, specified as a floating point number
                between 0 and 1.
            Order:
              type: string
              description: The order of operations when rolling out an updated task.
                Either the old task is shut down before the new task is started, or
                the new task is started before the old task is shut down.
              enum:
                - stop-first
                - start-first
          description: Specification for the update strategy of the service.
        RollbackConfig:
          type: object
          properties:
            Parallelism:
              type: integer
              description: Maximum number of tasks to be rolled back in one iteration
                (0 means unlimited parallelism).
              format: int64
            Delay:
              type: integer
              description: Amount of time between rollback iterations, in nanoseconds.
              format: int64
            FailureAction:
              type: string
              description: Action to take if an rolled back task fails to run, or
                stops running during the rollback.
              enum:
                - continue
                - pause
            Monitor:
              type: integer
              description: Amount of time to monitor each rolled back task for failures,
                in nanoseconds.
              format: int64
            MaxFailureRatio:
              type: number
              description: The fraction of tasks that may fail during a rollback before
                the failure action is invoked, specified as a floating point number
                between 0 and 1.
            Order:
              type: string
              description: The order of operations when rolling back a task. Either
                the old task is shut down before the new task is started, or the new
                task is started before the old task is shut down.
              enum:
                - stop-first
                - start-first
          description: Specification for the rollback strategy of the service.
        Networks:
          type: array
          description: Specifies which networks the service should attach to.
          items:
            $ref: '#/components/schemas/NetworkAttachmentConfig'
        EndpointSpec:
          $ref: '#/components/schemas/EndpointSpec'
      description: User modifiable configuration for a service.
    EndpointPortConfig:
      type: object
      properties:
        Name:
          type: string
        Protocol:
          type: string
          enum:
            - tcp
            - udp
            - sctp
        TargetPort:
          type: integer
          description: The port inside the container.
        PublishedPort:
          type: integer
          description: The port on the swarm hosts.
        PublishMode:
          type: string
          description: |
            The mode in which port is published.

            <p><br /></p>

            - "ingress" makes the target port accessible on every node,
              regardless of whether there is a task for the service running on
              that node or not.
            - "host" bypasses the routing mesh and publish the port directly on
              the swarm node where that service is running.
          example: ingress
          default: ingress
          enum:
            - ingress
            - host
    EndpointSpec:
      type: object
      properties:
        Mode:
          type: string
          description: |
            The mode of resolution to use for internal load balancing between tasks.
          default: vip
          enum:
            - vip
            - dnsrr
        Ports:
          type: array
          description: List of exposed ports that this service is accessible on from
            the outside. Ports can only be provided if `vip` resolution mode is used.
          items:
            $ref: '#/components/schemas/EndpointPortConfig'
      description: Properties that can be configured to access and load balance a
        service.
    Service:
      type: object
      properties:
        ID:
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          type: string
          format: dateTime
        UpdatedAt:
          type: string
          format: dateTime
        Spec:
          $ref: '#/components/schemas/ServiceSpec'
        Endpoint:
          type: object
          properties:
            Spec:
              $ref: '#/components/schemas/EndpointSpec'
            Ports:
              type: array
              items:
                $ref: '#/components/schemas/EndpointPortConfig'
            VirtualIPs:
              type: array
              items:
                type: object
                properties:
                  NetworkID:
                    type: string
                  Addr:
                    type: string
        UpdateStatus:
          type: object
          properties:
            State:
              type: string
              enum:
                - updating
                - paused
                - completed
            StartedAt:
              type: string
              format: dateTime
            CompletedAt:
              type: string
              format: dateTime
            Message:
              type: string
          description: The status of a service update.
      example:
        ID: 9mnpnzenvg8p8tdbtq4wvbkcz
        Version:
          Index: 19
        CreatedAt: 2016-06-07
        UpdatedAt: 2016-06-07
        Spec:
          Name: hopeful_cori
          TaskTemplate:
            ContainerSpec:
              Image: redis
            Resources:
              Limits: {}
              Reservations: {}
            RestartPolicy:
              Condition: any
              MaxAttempts: 0
            Placement: {}
            ForceUpdate: 0
          Mode:
            Replicated:
              Replicas: 1
          UpdateConfig:
            Parallelism: 1
            Delay: 1000000000
            FailureAction: pause
            Monitor: 15000000000
            MaxFailureRatio: 0.15
          RollbackConfig:
            Parallelism: 1
            Delay: 1000000000
            FailureAction: pause
            Monitor: 15000000000
            MaxFailureRatio: 0.15
          EndpointSpec:
            Mode: vip
            Ports:
              - Protocol: tcp
                TargetPort: 6379
                PublishedPort: 30001
        Endpoint:
          Spec:
            Mode: vip
            Ports:
              - Protocol: tcp
                TargetPort: 6379
                PublishedPort: 30001
          Ports:
            - Protocol: tcp
              TargetPort: 6379
              PublishedPort: 30001
          VirtualIPs:
            - NetworkID: 4qvuz4ko70xaltuqbt8956gd1
              Addr: 10.255.0.2/16
            - NetworkID: 4qvuz4ko70xaltuqbt8956gd1
              Addr: 10.255.0.3/16
    ImageDeleteResponseItem:
      type: object
      properties:
        Untagged:
          type: string
          description: The image ID of an image that was untagged
        Deleted:
          type: string
          description: The image ID of an image that was deleted
    ServiceUpdateResponse:
      type: object
      properties:
        Warnings:
          type: array
          description: Optional warning messages
          items:
            type: string
      example:
        Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest
          not found'
    ContainerSummary:
      type: array
      items:
        type: object
        properties:
          Id:
            type: string
            description: The ID of this container
            x-go-name: ID
          Names:
            type: array
            description: The names that this container has been given
            items:
              type: string
          Image:
            type: string
            description: The name of the image used when creating this container
          ImageID:
            type: string
            description: The ID of the image that this container was created from
          Command:
            type: string
            description: Command to run when starting the container
          Created:
            type: integer
            description: When the container was created
            format: int64
          Ports:
            type: array
            description: The ports exposed by this container
            items:
              $ref: '#/components/schemas/Port'
          SizeRw:
            type: integer
            description: The size of files that have been created or changed by this
              container
            format: int64
          SizeRootFs:
            type: integer
            description: The total size of all the files in this container
            format: int64
          Labels:
            type: object
            additionalProperties:
              type: string
            description: User-defined key/value metadata.
          State:
            type: string
            description: The state of this container (e.g. `Exited`)
          Status:
            type: string
            description: Additional human-readable status of this container (e.g.
              `Exit 0`)
          HostConfig:
            type: object
            properties:
              NetworkMode:
                type: string
          NetworkSettings:
            type: object
            properties:
              Networks:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/EndpointSettings'
            description: A summary of the container's network settings
          Mounts:
            type: array
            items:
              $ref: '#/components/schemas/Mount'
    Driver:
      required:
        - Name
      type: object
      properties:
        Name:
          type: string
          description: Name of the driver.
          nullable: false
          example: some-driver
        Options:
          type: object
          additionalProperties:
            type: string
          description: Key/value map of driver-specific options.
          nullable: false
          example:
            OptionA: value for driver-specific option A
            OptionB: value for driver-specific option B
      description: Driver represents a driver (network, logging, secrets).
    SecretSpec:
      type: object
      properties:
        Name:
          type: string
          description: User-defined name of the secret.
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          example:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
        Data:
          type: string
          description: |
            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
            data to store as secret.

            This field is only used to _create_ a secret, and is not returned by
            other endpoints.
          example: ""
        Driver:
          $ref: '#/components/schemas/Driver'
        Templating:
          $ref: '#/components/schemas/Driver'
    Secret:
      type: object
      properties:
        ID:
          type: string
          example: blt1owaxmitz71s9v5zh81zun
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          type: string
          format: dateTime
          example: 2017-07-20
        UpdatedAt:
          type: string
          format: dateTime
          example: 2017-07-20
        Spec:
          $ref: '#/components/schemas/SecretSpec'
    ConfigSpec:
      type: object
      properties:
        Name:
          type: string
          description: User-defined name of the config.
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        Data:
          type: string
          description: |
            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
            config data.
        Templating:
          $ref: '#/components/schemas/Driver'
    Config:
      type: object
      properties:
        ID:
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          type: string
          format: dateTime
        UpdatedAt:
          type: string
          format: dateTime
        Spec:
          $ref: '#/components/schemas/ConfigSpec'
    ContainerState:
      type: object
      properties:
        Status:
          type: string
          description: |
            String representation of the container state. Can be one of "created",
            "running", "paused", "restarting", "removing", "exited", or "dead".
          example: running
          enum:
            - created
            - running
            - paused
            - restarting
            - removing
            - exited
            - dead
        Running:
          type: boolean
          description: |
            Whether this container is running.

            Note that a running container can be _paused_. The `Running` and `Paused`
            booleans are not mutually exclusive:

            When pausing a container (on Linux), the freezer cgroup is used to suspend
            all processes in the container. Freezing the process requires the process to
            be running. As a result, paused containers are both `Running` _and_ `Paused`.

            Use the `Status` field instead to determine if a container's state is "running".
          example: true
        Paused:
          type: boolean
          description: Whether this container is paused.
          example: false
        Restarting:
          type: boolean
          description: Whether this container is restarting.
          example: false
        OOMKilled:
          type: boolean
          description: Whether this container has been killed because it ran out of
            memory.
          example: false
        Dead:
          type: boolean
          example: false
        Pid:
          type: integer
          description: The process ID of this container
          example: 1234
        ExitCode:
          type: integer
          description: The last exit code of this container
          example: 0
        Error:
          type: string
        StartedAt:
          type: string
          description: The time when this container was last started.
          example: 2020-01-06
        FinishedAt:
          type: string
          description: The time when this container last exited.
          example: 2020-01-06
        Health:
          $ref: '#/components/schemas/Health'
      description: |
        ContainerState stores container's running state. It's part of ContainerJSONBase
        and will be returned by the "inspect" command.
    SystemInfo:
      type: object
      properties:
        ID:
          type: string
          description: |
            Unique identifier of the daemon.

            <p><br /></p>

            > **Note**: The format of the ID itself is not part of the API, and
            > should not be considered stable.
          example: 7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS
        Containers:
          type: integer
          description: Total number of containers on the host.
          example: 14
        ContainersRunning:
          type: integer
          description: |
            Number of containers with status `"running"`.
          example: 3
        ContainersPaused:
          type: integer
          description: |
            Number of containers with status `"paused"`.
          example: 1
        ContainersStopped:
          type: integer
          description: |
            Number of containers with status `"stopped"`.
          example: 10
        Images:
          type: integer
          description: |
            Total number of images on the host.

            Both _tagged_ and _untagged_ (dangling) images are counted.
          example: 508
        Driver:
          type: string
          description: Name of the storage driver in use.
          example: overlay2
        DriverStatus:
          type: array
          description: |
            Information specific to the storage driver, provided as
            "label" / "value" pairs.

            This information is provided by the storage driver, and formatted
            in a way consistent with the output of `docker info` on the command
            line.

            <p><br /></p>

            > **Note**: The information returned in this field, including the
            > formatting of values and labels, should not be considered stable,
            > and may change without notice.
          example:
            - - Backing Filesystem
              - extfs
            - - Supports d_type
              - "true"
            - - Native Overlay Diff
              - "true"
          items:
            type: array
            items:
              type: string
        DockerRootDir:
          type: string
          description: |
            Root directory of persistent Docker state.

            Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
            on Windows.
          example: /var/lib/docker
        SystemStatus:
          type: array
          description: |
            Status information about this node (standalone Swarm API).

            <p><br /></p>

            > **Note**: The information returned in this field is only propagated
            > by the Swarm standalone API, and is empty (`null`) when using
            > built-in swarm mode.
          example:
            - - Role
              - primary
            - - State
              - Healthy
            - - Strategy
              - spread
            - - Filters
              - health, port, containerslots, dependency, affinity, constraint, whitelist
            - - Nodes
              - "2"
            - - ' swarm-agent-00'
              - 192.168.99.102:2376
            - - '  └ ID'
              - 5CT6:FBGO:RVGO:CZL4:PB2K:WCYN:2JSV:KSHH:GGFW:QOPG:6J5Q:IOZ2|192.168.99.102:2376
            - - '  └ Status'
              - Healthy
            - - '  └ Containers'
              - 1 (1 Running, 0 Paused, 0 Stopped)
            - - '  └ Reserved CPUs'
              - 0 / 1
            - - '  └ Reserved Memory'
              - 0 B / 1.021 GiB
            - - '  └ Labels'
              - 'kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce
              (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux,
              provider=virtualbox, storagedriver=aufs'
            - - '  └ UpdatedAt'
              - 2017-08-09
            - - '  └ ServerVersion'
              - 17.06.0-ce
            - - ' swarm-manager'
              - 192.168.99.101:2376
            - - '  └ ID'
              - TAMD:7LL3:SEF7:LW2W:4Q2X:WVFH:RTXX:JSYS:XY2P:JEHL:ZMJK:JGIW|192.168.99.101:2376
            - - '  └ Status'
              - Healthy
            - - '  └ Containers'
              - 2 (2 Running, 0 Paused, 0 Stopped)
            - - '  └ Reserved CPUs'
              - 0 / 1
            - - '  └ Reserved Memory'
              - 0 B / 1.021 GiB
            - - '  └ Labels'
              - 'kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce
              (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux,
              provider=virtualbox, storagedriver=aufs'
            - - '  └ UpdatedAt'
              - 2017-08-09
            - - '  └ ServerVersion'
              - 17.06.0-ce
          items:
            type: array
            items:
              type: string
        Plugins:
          $ref: '#/components/schemas/PluginsInfo'
        MemoryLimit:
          type: boolean
          description: Indicates if the host has memory limit support enabled.
          example: true
        SwapLimit:
          type: boolean
          description: Indicates if the host has memory swap limit support enabled.
          example: true
        KernelMemory:
          type: boolean
          description: Indicates if the host has kernel memory limit support enabled.
          example: true
        CpuCfsPeriod:
          type: boolean
          description: Indicates if CPU CFS(Completely Fair Scheduler) period is supported
            by the host.
          example: true
        CpuCfsQuota:
          type: boolean
          description: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported
            by the host.
          example: true
        CPUShares:
          type: boolean
          description: Indicates if CPU Shares limiting is supported by the host.
          example: true
        CPUSet:
          type: boolean
          description: |
            Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.

            See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
          example: true
        PidsLimit:
          type: boolean
          description: Indicates if the host kernel has PID limit support enabled.
          example: true
        OomKillDisable:
          type: boolean
          description: Indicates if OOM killer disable is supported on the host.
        IPv4Forwarding:
          type: boolean
          description: Indicates IPv4 forwarding is enabled.
          example: true
        BridgeNfIptables:
          type: boolean
          description: Indicates if `bridge-nf-call-iptables` is available on the
            host.
          example: true
        BridgeNfIp6tables:
          type: boolean
          description: Indicates if `bridge-nf-call-ip6tables` is available on the
            host.
          example: true
        Debug:
          type: boolean
          description: Indicates if the daemon is running in debug-mode / with debug-level
            logging enabled.
          example: true
        NFd:
          type: integer
          description: |
            The total number of file Descriptors in use by the daemon process.

            This information is only returned if debug-mode is enabled.
          example: 64
        NGoroutines:
          type: integer
          description: |
            The  number of goroutines that currently exist.

            This information is only returned if debug-mode is enabled.
          example: 174
        SystemTime:
          type: string
          description: |
            Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
            format with nano-seconds.
          example: 2017-08-08T20:28:29.06202363Z
        LoggingDriver:
          type: string
          description: |
            The logging driver to use as a default for new containers.
        CgroupDriver:
          type: string
          description: |
            The driver to use for managing cgroups.
          example: cgroupfs
          default: cgroupfs
          enum:
            - cgroupfs
            - systemd
            - none
        NEventsListener:
          type: integer
          description: Number of event listeners subscribed.
          example: 30
        KernelVersion:
          type: string
          description: |
            Kernel version of the host.

            On Linux, this information obtained from `uname`. On Windows this
            information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
            registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
          example: 4.9.38-moby
        OperatingSystem:
          type: string
          description: |
            Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
            or "Windows Server 2016 Datacenter"
          example: Alpine Linux v3.5
        OSType:
          type: string
          description: |
            Generic type of the operating system of the host, as returned by the
            Go runtime (`GOOS`).

            Currently returned values are "linux" and "windows". A full list of
            possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
          example: linux
        Architecture:
          type: string
          description: |
            Hardware architecture of the host, as returned by the Go runtime
            (`GOARCH`).

            A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
          example: x86_64
        NCPU:
          type: integer
          description: |
            The number of logical CPUs usable by the daemon.

            The number of available CPUs is checked by querying the operating
            system when the daemon starts. Changes to operating system CPU
            allocation after the daemon is started are not reflected.
          example: 4
        MemTotal:
          type: integer
          description: |
            Total amount of physical memory available on the host, in kilobytes (kB).
          format: int64
          example: 2095882240
        IndexServerAddress:
          type: string
          description: |
            Address / URL of the index server that is used for image search,
            and as a default for user authentication for Docker Hub and Docker Cloud.
          example: https://index.docker.io/v1/
          default: https://index.docker.io/v1/
        RegistryConfig:
          $ref: '#/components/schemas/RegistryServiceConfig'
        GenericResources:
          $ref: '#/components/schemas/GenericResources'
        HttpProxy:
          type: string
          description: |
            HTTP-proxy configured for the daemon. This value is obtained from the
            [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            are masked in the API response.

            Containers do not automatically inherit this configuration.
          example: http://xxxxx:xxxxx@proxy.corp.example.com:8080
        HttpsProxy:
          type: string
          description: |
            HTTPS-proxy configured for the daemon. This value is obtained from the
            [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            are masked in the API response.

            Containers do not automatically inherit this configuration.
          example: https://xxxxx:xxxxx@proxy.corp.example.com:4443
        NoProxy:
          type: string
          description: |
            Comma-separated list of domain extensions for which no proxy should be
            used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
            environment variable.

            Containers do not automatically inherit this configuration.
          example: '*.local, 169.254/16'
        Name:
          type: string
          description: Hostname of the host.
          example: node5.corp.example.com
        Labels:
          type: array
          description: |
            User-defined labels (key/value metadata) as set on the daemon.

            <p><br /></p>

            > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
            > set through the daemon configuration, and _node_ labels, set from a
            > manager node in the Swarm. Node labels are not included in this
            > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
            > on a manager node in the Swarm.
          example:
            - storage=ssd
            - production
          items:
            type: string
        ExperimentalBuild:
          type: boolean
          description: |
            Indicates if experimental features are enabled on the daemon.
          example: true
        ServerVersion:
          type: string
          description: |
            Version string of the daemon.

            > **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/)
            > returns the Swarm version instead of the daemon  version, for example
            > `swarm/1.2.8`.
          example: 17.06.0-ce
        ClusterStore:
          type: string
          description: |
            URL of the distributed storage backend.


            The storage backend is used for multihost networking (to store
            network and endpoint information) and by the node discovery mechanism.

            <p><br /></p>

            > **Note**: This field is only propagated when using standalone Swarm
            > mode, and overlay networking using an external k/v store. Overlay
            > networks with Swarm mode enabled use the built-in raft store, and
            > this field will be empty.
          example: consul://consul.corp.example.com:8600/some/path
        ClusterAdvertise:
          type: string
          description: |
            The network endpoint that the Engine advertises for the purpose of
            node discovery. ClusterAdvertise is a `host:port` combination on which
            the daemon is reachable by other hosts.

            <p><br /></p>

            > **Note**: This field is only propagated when using standalone Swarm
            > mode, and overlay networking using an external k/v store. Overlay
            > networks with Swarm mode enabled use the built-in raft store, and
            > this field will be empty.
          example: node5.corp.example.com:8000
        Runtimes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Runtime'
          description: |
            List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
            runtimes configured on the daemon. Keys hold the "name" used to
            reference the runtime.

            The Docker daemon relies on an OCI compliant runtime (invoked via the
            `containerd` daemon) as its interface to the Linux kernel namespaces,
            cgroups, and SELinux.

            The default runtime is `runc`, and automatically configured. Additional
            runtimes can be configured by the user and will be listed here.
          example:
            runc:
              path: runc
            runc-master:
              path: /go/bin/runc
            custom:
              path: /usr/local/bin/my-oci-runtime
              runtimeArgs:
                - --debug
                - --systemd-cgroup=false
        DefaultRuntime:
          type: string
          description: |
            Name of the default OCI runtime that is used when starting containers.

            The default can be overridden per-container at create time.
          example: runc
          default: runc
        Swarm:
          $ref: '#/components/schemas/SwarmInfo'
        LiveRestoreEnabled:
          type: boolean
          description: |
            Indicates if live restore is enabled.

            If enabled, containers are kept running when the daemon is shutdown
            or upon daemon start if running containers are detected.
          example: false
          default: false
        Isolation:
          type: string
          description: |
            Represents the isolation technology to use as a default for containers.
            The supported values are platform-specific.

            If no isolation value is specified on daemon start, on Windows client,
            the default is `hyperv`, and on Windows server, the default is `process`.

            This option is currently not used on other platforms.
          default: default
          enum:
            - default
            - hyperv
            - process
        InitBinary:
          type: string
          description: |
            Name and, optional, path of the `docker-init` binary.

            If the path is omitted, the daemon searches the host's `$PATH` for the
            binary and uses the first result.
          example: docker-init
        ContainerdCommit:
          $ref: '#/components/schemas/Commit'
        RuncCommit:
          $ref: '#/components/schemas/Commit'
        InitCommit:
          $ref: '#/components/schemas/Commit'
        SecurityOptions:
          type: array
          description: |
            List of security features that are enabled on the daemon, such as
            apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.

            Additional configuration options for each security feature may
            be present, and are included as a comma-separated list of key/value
            pairs.
          example:
            - name=apparmor
            - name=seccomp,profile=default
            - name=selinux
            - name=userns
            - name=rootless
          items:
            type: string
        ProductLicense:
          type: string
          description: |
            Reports a summary of the product license on the daemon.

            If a commercial license has been applied to the daemon, information
            such as number of nodes, and expiration are included.
          example: Community Engine
        Warnings:
          type: array
          description: |
            List of warnings / informational messages about missing features, or
            issues related to the daemon configuration.

            These messages can be printed by the client as information to the user.
          example:
            - 'WARNING: No memory limit support'
            - 'WARNING: bridge-nf-call-iptables is disabled'
            - 'WARNING: bridge-nf-call-ip6tables is disabled'
          items:
            type: string
    PluginsInfo:
      type: object
      properties:
        Volume:
          type: array
          description: Names of available volume-drivers, and network-driver plugins.
          example:
            - local
          items:
            type: string
        Network:
          type: array
          description: Names of available network-drivers, and network-driver plugins.
          example:
            - bridge
            - host
            - ipvlan
            - macvlan
            - null
            - overlay
          items:
            type: string
        Authorization:
          type: array
          description: Names of available authorization plugins.
          example:
            - img-authz-plugin
            - hbm
          items:
            type: string
        Log:
          type: array
          description: Names of available logging-drivers, and logging-driver plugins.
          example:
            - awslogs
            - fluentd
            - gcplogs
            - gelf
            - journald
            - json-file
            - logentries
            - splunk
            - syslog
          items:
            type: string
      description: |
        Available plugins per type.

        <p><br /></p>

        > **Note**: Only unmanaged (V1) plugins are included in this list.
        > V1 plugins are "lazily" loaded, and are not returned in this list
        > if there is no resource using the plugin.
    RegistryServiceConfig:
      type: object
      properties:
        AllowNondistributableArtifactsCIDRs:
          type: array
          description: |
            List of IP ranges to which nondistributable artifacts can be pushed,
            using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).

            Some images (for example, Windows base images) contain artifacts
            whose distribution is restricted by license. When these images are
            pushed to a registry, restricted artifacts are not included.

            This configuration override this behavior, and enables the daemon to
            push nondistributable artifacts to all registries whose resolved IP
            address is within the subnet described by the CIDR syntax.

            This option is useful when pushing images containing
            nondistributable artifacts to a registry on an air-gapped network so
            hosts on that network can pull the images without connecting to
            another server.

            > **Warning**: Nondistributable artifacts typically have restrictions
            > on how and where they can be distributed and shared. Only use this
            > feature to push artifacts to private registries and ensure that you
            > are in compliance with any terms that cover redistributing
            > nondistributable artifacts.
          example:
            - ::1/128
            - 127.0.0.0/8
          items:
            type: string
        AllowNondistributableArtifactsHostnames:
          type: array
          description: |
            List of registry hostnames to which nondistributable artifacts can be
            pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.

            Some images (for example, Windows base images) contain artifacts
            whose distribution is restricted by license. When these images are
            pushed to a registry, restricted artifacts are not included.

            This configuration override this behavior for the specified
            registries.

            This option is useful when pushing images containing
            nondistributable artifacts to a registry on an air-gapped network so
            hosts on that network can pull the images without connecting to
            another server.

            > **Warning**: Nondistributable artifacts typically have restrictions
            > on how and where they can be distributed and shared. Only use this
            > feature to push artifacts to private registries and ensure that you
            > are in compliance with any terms that cover redistributing
            > nondistributable artifacts.
          example:
            - registry.internal.corp.example.com:3000
            - '[2001:db8:a0b:12f0::1]:443'
          items:
            type: string
        InsecureRegistryCIDRs:
          type: array
          description: |
            List of IP ranges of insecure registries, using the CIDR syntax
            ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
            accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
            from unknown CAs) communication.

            By default, local registries (`127.0.0.0/8`) are configured as
            insecure. All other registries are secure. Communicating with an
            insecure registry is not possible if the daemon assumes that registry
            is secure.

            This configuration override this behavior, insecure communication with
            registries whose resolved IP address is within the subnet described by
            the CIDR syntax.

            Registries can also be marked insecure by hostname. Those registries
            are listed under `IndexConfigs` and have their `Secure` field set to
            `false`.

            > **Warning**: Using this option can be useful when running a local
            > registry, but introduces security vulnerabilities. This option
            > should therefore ONLY be used for testing purposes. For increased
            > security, users should add their CA to their system's list of trusted
            > CAs instead of enabling this option.
          example:
            - ::1/128
            - 127.0.0.0/8
          items:
            type: string
        IndexConfigs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IndexInfo'
          example:
            127.0.0.1:5000:
              Name: 127.0.0.1:5000
              Mirrors: []
              Secure: false
              Official: false
            '[2001:db8:a0b:12f0::1]:80':
              Name: '[2001:db8:a0b:12f0::1]:80'
              Mirrors: []
              Secure: false
              Official: false
            docker.io:
              Name: docker.io
              Mirrors:
                - https://hub-mirror.corp.example.com:5000/
              Secure: true
              Official: true
            registry.internal.corp.example.com:3000:
              Name: registry.internal.corp.example.com:3000
              Mirrors: []
              Secure: false
              Official: false
        Mirrors:
          type: array
          description: |
            List of registry URLs that act as a mirror for the official
            (`docker.io`) registry.
          example:
            - https://hub-mirror.corp.example.com:5000/
            - https://[2001:db8:a0b:12f0::1]/
          items:
            type: string
      description: |
        RegistryServiceConfig stores daemon registry services configuration.
      nullable: true
      x-nullable: true
    IndexInfo:
      type: object
      properties:
        Name:
          type: string
          description: |
            Name of the registry, such as "docker.io".
          example: docker.io
        Mirrors:
          type: array
          description: |
            List of mirrors, expressed as URIs.
          example:
            - https://hub-mirror.corp.example.com:5000/
            - https://registry-2.docker.io/
            - https://registry-3.docker.io/
          items:
            type: string
        Secure:
          type: boolean
          description: |
            Indicates if the registry is part of the list of insecure
            registries.

            If `false`, the registry is insecure. Insecure registries accept
            un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
            unknown CAs) communication.

            > **Warning**: Insecure registries can be useful when running a local
            > registry. However, because its use creates security vulnerabilities
            > it should ONLY be enabled for testing purposes. For increased
            > security, users should add their CA to their system's list of
            > trusted CAs instead of enabling this option.
          example: true
        Official:
          type: boolean
          description: |
            Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
          example: true
      description: IndexInfo contains information about a registry.
      nullable: true
      x-nullable: true
    Runtime:
      type: object
      properties:
        path:
          type: string
          description: |
            Name and, optional, path, of the OCI executable binary.

            If the path is omitted, the daemon searches the host's `$PATH` for the
            binary and uses the first result.
          example: /usr/local/bin/my-oci-runtime
        runtimeArgs:
          type: array
          description: |
            List of command-line arguments to pass to the runtime when invoked.
          nullable: true
          example:
            - --debug
            - --systemd-cgroup=false
          items:
            type: string
      description: |
        Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
        runtime.

        The runtime is invoked by the daemon via the `containerd` daemon. OCI
        runtimes act as an interface to the Linux kernel namespaces, cgroups,
        and SELinux.
    Commit:
      type: object
      properties:
        ID:
          type: string
          description: Actual commit ID of external tool.
          example: cfb82a876ecc11b5ca0977d1733adbe58599088a
        Expected:
          type: string
          description: |
            Commit ID of external tool expected by dockerd as set at build time.
          example: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
      description: |
        Commit holds the Git-commit (SHA1) that a binary was built from, as
        reported in the version-string of external tools, such as `containerd`,
        or `runC`.
    SwarmInfo:
      type: object
      properties:
        NodeID:
          type: string
          description: Unique identifier of for this node in the swarm.
          example: k67qz4598weg5unwwffg6z1m1
          default: ""
        NodeAddr:
          type: string
          description: |
            IP address at which this node can be reached by other nodes in the
            swarm.
          example: 10.0.0.46
          default: ""
        LocalNodeState:
          $ref: '#/components/schemas/LocalNodeState'
        ControlAvailable:
          type: boolean
          example: true
          default: false
        Error:
          type: string
          default: ""
        RemoteManagers:
          type: array
          description: |
            List of ID's and addresses of other managers in the swarm.
          nullable: true
          example:
            - NodeID: 71izy0goik036k48jg985xnds
              Addr: 10.0.0.158:2377
            - NodeID: 79y6h1o4gv8n120drcprv5nmc
              Addr: 10.0.0.159:2377
            - NodeID: k67qz4598weg5unwwffg6z1m1
              Addr: 10.0.0.46:2377
          items:
            $ref: '#/components/schemas/PeerNode'
        Nodes:
          type: integer
          description: Total number of nodes in the swarm.
          nullable: true
          example: 4
        Managers:
          type: integer
          description: Total number of managers in the swarm.
          nullable: true
          example: 3
        Cluster:
          $ref: '#/components/schemas/ClusterInfo'
      description: |
        Represents generic information about swarm.
    LocalNodeState:
      type: string
      description: Current local status of this node.
      example: active
      default: ""
      enum:
        - ""
        - inactive
        - pending
        - active
        - error
        - locked
    PeerNode:
      type: object
      properties:
        NodeID:
          type: string
          description: Unique identifier of for this node in the swarm.
        Addr:
          type: string
          description: |
            IP address and ports at which this node can be reached.
      description: Represents a peer-node in the swarm
    NetworkAttachmentConfig:
      type: object
      properties:
        Target:
          type: string
          description: The target network for attachment. Must be a network name or
            ID.
        Aliases:
          type: array
          description: Discoverable alternate names for the service on this network.
          items:
            type: string
        DriverOpts:
          type: object
          additionalProperties:
            type: string
          description: Driver attachment options for the network target
      description: Specifies how a service should be attached to a particular network.
